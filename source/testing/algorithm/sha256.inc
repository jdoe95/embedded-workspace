TEST(SHA256, Test1) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[61] = {
		  0x47, 0x6d, 0xb3, 0xfc, 0xe7, 0x81, 0x76, 0x30, 0x85, 0x48, 0x82, 0x67,
		  0x68, 0xac, 0xec, 0x19, 0x90, 0x47, 0x1d, 0xc7, 0x21, 0xf7, 0xcb, 0x7a,
		  0x58, 0xe5, 0x9a, 0x7d, 0xdf, 0xee, 0xda, 0x4d, 0xd4, 0x41, 0x57, 0x20,
		  0xc4, 0x01, 0x36, 0x5e, 0x63, 0xf8, 0x01, 0x42, 0xee, 0xd1, 0xb8, 0x20,
		  0xd3, 0xeb, 0x5c, 0xc9, 0x91, 0xba, 0x95, 0x7c, 0xa1, 0x3b, 0xcd, 0xab,
		  0xf0
	};
	sha256_update(&instance, test_data, 61);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xf1, 0xb9, 0xb8, 0xfa, 0xcf, 0x9a, 0xbd, 0x33, 0xf2, 0x83, 0x1d, 0xf6,
		  0xca, 0xe4, 0x43, 0xbf, 0x14, 0x85, 0x5b, 0xe0, 0x57, 0xbb, 0xf7, 0x3f,
		  0x25, 0xc5, 0x83, 0x1a, 0x63, 0xbc, 0x2c, 0xa4
	));
}
TEST(SHA256, Test2) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[61] = {
		  0xaf, 0xd8, 0x1f, 0xcd, 0xe7, 0x35, 0xa0, 0x8d, 0x6f, 0x11, 0xa2, 0x61,
		  0x8e, 0x0b, 0xeb, 0x8e, 0x8d, 0x8f, 0xca, 0xe5, 0x6b, 0xd4, 0x6a, 0x3a,
		  0x64, 0xdf, 0x4e, 0x9c, 0x7c, 0x47, 0x62, 0x3c, 0xda, 0x90, 0xed, 0xf2,
		  0x9c, 0x03, 0x26, 0xcb, 0x44, 0xbc, 0x85, 0x08, 0x13, 0x60, 0x05, 0xe5,
		  0x1c, 0xb8, 0xc1, 0x5e, 0x94, 0xab, 0x09, 0xe3, 0x6c, 0x3b, 0xba, 0xa6,
		  0xa2
	};
	sha256_update(&instance, test_data, 61);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xdf, 0x9f, 0x5e, 0x41, 0x75, 0x57, 0x44, 0x46, 0x12, 0xa0, 0x2e, 0xa0,
		  0x07, 0x3d, 0x77, 0x80, 0xa9, 0x9b, 0xf0, 0xde, 0x3e, 0x4d, 0x67, 0xa3,
		  0xa5, 0x1e, 0x41, 0x27, 0x0a, 0x25, 0x65, 0xf3
	));
}
TEST(SHA256, Test3) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[243] = {
		  0xb6, 0x11, 0xbb, 0x35, 0x16, 0x21, 0x5a, 0x0d, 0x69, 0x36, 0x3a, 0xc7,
		  0xb6, 0x1e, 0x5e, 0xd5, 0x2a, 0xfa, 0x3a, 0xe8, 0x34, 0xb8, 0xe3, 0x78,
		  0x2b, 0x1d, 0x6f, 0x4c, 0x96, 0x35, 0x8e, 0xa9, 0xeb, 0x0e, 0xe0, 0x81,
		  0x36, 0xdd, 0x59, 0x4a, 0x4f, 0xc7, 0x45, 0xed, 0x8f, 0x78, 0x02, 0x67,
		  0xc4, 0x4e, 0xb9, 0x0a, 0x87, 0xeb, 0x42, 0x62, 0xeb, 0x0b, 0x0f, 0x3f,
		  0xed, 0x6e, 0xf3, 0xf1, 0xa9, 0x77, 0xce, 0x99, 0xc0, 0xe2, 0xbf, 0x41,
		  0x03, 0xf6, 0x50, 0x7c, 0x89, 0xe5, 0x89, 0x3c, 0xbb, 0xe5, 0xc4, 0xd9,
		  0x08, 0x5e, 0xb9, 0x56, 0x30, 0xc3, 0x9c, 0xb9, 0x75, 0x5c, 0x98, 0xb7,
		  0x2b, 0xb0, 0x6a, 0x1a, 0xa8, 0x3b, 0xd0, 0xe0, 0xfd, 0xf1, 0xb0, 0x8c,
		  0x10, 0x72, 0xf9, 0xbe, 0x22, 0xb4, 0x8b, 0x26, 0xe8, 0x41, 0xa1, 0xb6,
		  0xf9, 0xbb, 0x3e, 0x90, 0x9b, 0x70, 0x7b, 0x9d, 0x05, 0x7b, 0x43, 0xfd,
		  0x86, 0x62, 0xea, 0xf8, 0xde, 0x8c, 0x33, 0x8d, 0x4a, 0x25, 0xac, 0xee,
		  0xa4, 0xec, 0xcb, 0x48, 0x1d, 0x20, 0x1a, 0x76, 0x4b, 0x0e, 0x40, 0xe5,
		  0x2b, 0x2d, 0xbb, 0x04, 0x07, 0x7d, 0xcf, 0xd7, 0x98, 0x13, 0x74, 0x32,
		  0x42, 0x8e, 0x0a, 0x3e, 0x4d, 0xa1, 0x02, 0x7a, 0xb6, 0x37, 0x0c, 0x4c,
		  0xb5, 0xce, 0xa1, 0x9e, 0x63, 0x4a, 0x30, 0x65, 0xda, 0x3f, 0x40, 0x18,
		  0xf1, 0xc8, 0xc0, 0x9f, 0x4d, 0xc7, 0x5c, 0xa0, 0x12, 0x34, 0xc6, 0x86,
		  0x5b, 0x7c, 0x45, 0xb6, 0xdd, 0xc8, 0x73, 0xfe, 0xc1, 0x12, 0x58, 0x57,
		  0xa7, 0x88, 0xc3, 0xe5, 0x3b, 0xd8, 0x17, 0x89, 0x57, 0x39, 0xbe, 0xc1,
		  0xf1, 0x7c, 0x0a, 0x75, 0x35, 0xb4, 0x48, 0x2a, 0xe4, 0x8c, 0x68, 0xba,
		  0xbd, 0x39, 0x64
	};
	sha256_update(&instance, test_data, 243);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x1b, 0x82, 0x43, 0xbb, 0x77, 0x03, 0xbd, 0x84, 0x76, 0xec, 0x3c, 0x0e,
		  0x3e, 0x74, 0x1c, 0x3a, 0x80, 0x9a, 0xe5, 0xbd, 0x89, 0x63, 0xec, 0xc3,
		  0x16, 0xc7, 0x77, 0x71, 0x88, 0x6e, 0x18, 0xf4
	));
}
TEST(SHA256, Test4) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[33] = {
		  0xee, 0x95, 0xab, 0x20, 0x54, 0x62, 0xa6, 0xf8, 0x2f, 0xd5, 0x1f, 0xda,
		  0xbe, 0xfc, 0x79, 0xe0, 0xdf, 0x78, 0xca, 0x9d, 0x02, 0xb2, 0xf3, 0x83,
		  0xbd, 0x5b, 0x20, 0x18, 0x65, 0x18, 0xbb, 0x7b, 0xe9
	};
	sha256_update(&instance, test_data, 33);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xdd, 0x13, 0x88, 0x46, 0x1b, 0xdd, 0xa4, 0x22, 0x6b, 0x50, 0x86, 0x5b,
		  0x07, 0xe1, 0xa9, 0x27, 0xab, 0x77, 0x82, 0xbc, 0xcf, 0x14, 0xc0, 0xbd,
		  0x7f, 0xf6, 0x97, 0x0d, 0x27, 0x61, 0x90, 0xce
	));
}
TEST(SHA256, Test5) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[121] = {
		  0x93, 0x0c, 0x1e, 0x8a, 0xfd, 0x94, 0x96, 0x24, 0x8a, 0xac, 0x19, 0x6c,
		  0x8f, 0x61, 0x88, 0xed, 0x63, 0x87, 0xcc, 0xcb, 0xd0, 0x87, 0xa2, 0x8c,
		  0xad, 0xd2, 0xde, 0x8a, 0x77, 0x6d, 0xfe, 0xd9, 0x61, 0x03, 0xa9, 0x7e,
		  0xcd, 0x7a, 0x5f, 0x0c, 0xe3, 0x1f, 0x5b, 0x26, 0xb7, 0xe3, 0x8a, 0x16,
		  0x10, 0x20, 0x41, 0x3c, 0xc0, 0x5b, 0xe6, 0x9c, 0x67, 0x70, 0x80, 0x96,
		  0x88, 0xd5, 0x3d, 0xd0, 0x0c, 0xe2, 0x28, 0x6b, 0x2f, 0x10, 0x8f, 0xc2,
		  0x03, 0x61, 0xc1, 0x1f, 0x2d, 0xdd, 0xbd, 0x8c, 0x99, 0xb4, 0xc2, 0x9f,
		  0xa3, 0xc5, 0xc4, 0x3d, 0x77, 0x1b, 0xc6, 0x6e, 0xfb, 0x8b, 0xd3, 0x65,
		  0x7e, 0xf9, 0xf7, 0xd5, 0xdf, 0x92, 0x7d, 0x76, 0x8f, 0x82, 0x88, 0xde,
		  0x9b, 0xff, 0x79, 0x93, 0xd3, 0x63, 0x0c, 0xbf, 0x1c, 0xd4, 0x44, 0x23,
		  0x81
	};
	sha256_update(&instance, test_data, 121);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x15, 0x39, 0xc2, 0xba, 0xda, 0xc3, 0x9f, 0x8b, 0x6c, 0xfb, 0xf0, 0xbc,
		  0xb8, 0xc8, 0x3a, 0xf1, 0xf1, 0x60, 0xb1, 0x0e, 0x50, 0x5d, 0x14, 0xc5,
		  0x83, 0x2b, 0x6b, 0x7f, 0xd1, 0xf9, 0x6c, 0x42
	));
}
TEST(SHA256, Test6) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[184] = {
		  0x3d, 0xd8, 0x84, 0x3e, 0xf1, 0x7c, 0x76, 0xde, 0xe0, 0xfe, 0x5e, 0x4e,
		  0xb9, 0xca, 0x18, 0x9c, 0x9b, 0xe0, 0x78, 0x94, 0x07, 0x72, 0xdc, 0xa4,
		  0x83, 0x75, 0xa9, 0xfe, 0x67, 0x2a, 0xb9, 0xdd, 0x91, 0x4c, 0x0e, 0x3d,
		  0x0a, 0x8b, 0x17, 0xb1, 0xd1, 0xb5, 0x82, 0x7a, 0x5f, 0x67, 0xb0, 0xc2,
		  0x01, 0x58, 0x48, 0x21, 0xf8, 0xd3, 0x1f, 0x0c, 0x3d, 0xc9, 0x27, 0xfb,
		  0xa0, 0xd4, 0x40, 0x35, 0x64, 0xca, 0xc8, 0x33, 0x71, 0x41, 0x4c, 0x5b,
		  0x03, 0x38, 0x37, 0xaf, 0xc0, 0xaf, 0x54, 0xd6, 0x01, 0x84, 0xe2, 0xc3,
		  0x2d, 0x36, 0x6f, 0xbc, 0x28, 0xcd, 0x51, 0x08, 0x7f, 0x92, 0x11, 0x6e,
		  0x35, 0xd0, 0xfe, 0x6d, 0x25, 0x3e, 0xcb, 0xc3, 0x22, 0xde, 0x17, 0xbd,
		  0xd4, 0x24, 0x66, 0x4d, 0x37, 0xf4, 0x8d, 0x74, 0xf0, 0x10, 0xff, 0x22,
		  0x3f, 0xa2, 0x9f, 0x28, 0x0b, 0xae, 0xc4, 0xaa, 0xfd, 0xcf, 0xd8, 0x9f,
		  0xc7, 0x93, 0xea, 0x3d, 0x9a, 0x18, 0x59, 0xfe, 0x6b, 0x7c, 0xec, 0x51,
		  0xe5, 0x73, 0x0b, 0x54, 0xa3, 0xe2, 0x5a, 0x5c, 0xd3, 0x4f, 0x1d, 0xc5,
		  0x2a, 0xd9, 0x6c, 0xf7, 0x0a, 0x31, 0xc0, 0xd8, 0x35, 0xb5, 0x06, 0x09,
		  0x3c, 0x45, 0x95, 0x9e, 0xe3, 0x51, 0xe1, 0xcd, 0x28, 0x6a, 0x36, 0x63,
		  0x10, 0x75, 0x5a, 0x49
	};
	sha256_update(&instance, test_data, 184);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x06, 0xb4, 0x41, 0x12, 0xf5, 0x8a, 0xf1, 0x7b, 0x2a, 0x9f, 0x90, 0x37,
		  0x16, 0x54, 0x5b, 0x3e, 0xca, 0x73, 0x44, 0x79, 0xf4, 0xcf, 0x23, 0x1d,
		  0xff, 0xa0, 0x1a, 0xdc, 0xdd, 0x92, 0x87, 0x51
	));
}
TEST(SHA256, Test7) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[43] = {
		  0x1d, 0xf8, 0xc6, 0xe7, 0x50, 0x47, 0xb1, 0xf3, 0xf3, 0x89, 0xe3, 0xe7,
		  0x52, 0x1b, 0x11, 0x16, 0xb8, 0xea, 0x53, 0x7a, 0xa2, 0xcc, 0x8d, 0xb0,
		  0xc9, 0xc0, 0x29, 0x80, 0x0f, 0x80, 0x58, 0x84, 0x80, 0x2f, 0x89, 0xc9,
		  0x35, 0x60, 0x52, 0x01, 0x2e, 0x2a, 0x99
	};
	sha256_update(&instance, test_data, 43);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x38, 0x64, 0xc8, 0x4d, 0x39, 0x08, 0x00, 0x85, 0xd9, 0x87, 0xdf, 0x92,
		  0x99, 0x2f, 0xd4, 0x61, 0x8e, 0x92, 0x0b, 0xa5, 0x16, 0x58, 0xc7, 0x11,
		  0xbe, 0xa0, 0x6a, 0xa4, 0x63, 0xf2, 0x22, 0x93
	));
}
TEST(SHA256, Test8) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[241] = {
		  0xf9, 0x47, 0x5d, 0x00, 0x72, 0x07, 0xcd, 0x63, 0x98, 0x6e, 0xb7, 0x48,
		  0xe4, 0xd9, 0x5f, 0x93, 0xf9, 0xb4, 0x31, 0x14, 0xc8, 0x5c, 0xd6, 0x3c,
		  0x38, 0x30, 0x38, 0xb9, 0x2b, 0x8c, 0x81, 0x09, 0x9a, 0x64, 0x75, 0x6a,
		  0x47, 0xc0, 0x55, 0x0d, 0x3a, 0x8c, 0x16, 0xa3, 0xd9, 0x82, 0xe1, 0x78,
		  0x66, 0xda, 0xb9, 0xf5, 0xd9, 0x9e, 0x24, 0xad, 0x9a, 0xf4, 0x1c, 0x9c,
		  0xfd, 0x5b, 0xff, 0x60, 0x63, 0xf4, 0x11, 0x84, 0x68, 0xd9, 0x36, 0x5c,
		  0x1b, 0x5f, 0xba, 0xa1, 0x0a, 0x62, 0xb6, 0x73, 0x48, 0xa2, 0x2a, 0x6e,
		  0x13, 0xab, 0x89, 0xd3, 0x8a, 0x12, 0xe6, 0x41, 0xe8, 0x16, 0x54, 0x89,
		  0x39, 0x0d, 0xb0, 0x55, 0xba, 0x7b, 0xd9, 0x14, 0xc8, 0x57, 0x71, 0xd2,
		  0xdf, 0xab, 0x27, 0x19, 0x58, 0x03, 0x1f, 0x37, 0x4b, 0x8f, 0xe2, 0xa1,
		  0x35, 0x9e, 0xdf, 0x1d, 0x53, 0x0c, 0xe0, 0xec, 0x0a, 0x70, 0x82, 0x32,
		  0xf6, 0x12, 0x2f, 0xff, 0x93, 0x55, 0x18, 0xb0, 0x50, 0x1f, 0x6d, 0xb8,
		  0xfa, 0xed, 0xcb, 0x4d, 0xb5, 0xbe, 0x81, 0x94, 0xa2, 0x57, 0x3e, 0x62,
		  0x41, 0x2b, 0xaf, 0x28, 0xdb, 0x33, 0x8b, 0x49, 0xef, 0xa8, 0x5c, 0x3a,
		  0xfa, 0xed, 0x2e, 0x68, 0xfe, 0x9e, 0xc6, 0x0f, 0xcd, 0xec, 0xfc, 0x94,
		  0x2f, 0xf0, 0x57, 0x8a, 0x74, 0x28, 0x98, 0xd0, 0x57, 0xa4, 0x4c, 0xfd,
		  0xe9, 0xce, 0x8f, 0x39, 0xa9, 0xc3, 0x7d, 0x20, 0xe1, 0xb8, 0x30, 0xc0,
		  0xef, 0x0d, 0xb9, 0x53, 0x71, 0x3e, 0x26, 0x08, 0xd4, 0xe6, 0x82, 0xcb,
		  0x23, 0x6d, 0xef, 0x6e, 0x88, 0x43, 0xc7, 0xa3, 0x09, 0xcc, 0xb4, 0x7c,
		  0x84, 0xb3, 0x20, 0xf5, 0x2c, 0x02, 0xe6, 0xe2, 0x5b, 0xe2, 0xaf, 0x7c,
		  0xd4
	};
	sha256_update(&instance, test_data, 241);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x51, 0x71, 0x9a, 0x61, 0xa2, 0xd1, 0x40, 0x5a, 0xdf, 0xd6, 0xf4, 0x70,
		  0xb0, 0x2f, 0xa8, 0x75, 0x99, 0x11, 0xa0, 0x23, 0x8f, 0xdc, 0x7c, 0x20,
		  0x53, 0x2e, 0xcd, 0x2a, 0x61, 0xba, 0xeb, 0x73
	));
}
TEST(SHA256, Test9) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[213] = {
		  0xe1, 0x2a, 0x6b, 0xfb, 0x61, 0x53, 0xae, 0x49, 0x50, 0xf2, 0x31, 0x0e,
		  0x65, 0x8f, 0x1f, 0xc5, 0x86, 0xd9, 0xc9, 0xd9, 0xd4, 0xd7, 0x6d, 0x02,
		  0xd5, 0xec, 0xfa, 0xf8, 0xca, 0xdd, 0x30, 0x87, 0x72, 0x18, 0x92, 0x9a,
		  0xe3, 0x56, 0x81, 0x2d, 0xd8, 0xff, 0x89, 0x5a, 0x6f, 0x9e, 0xe6, 0x98,
		  0xcc, 0x2e, 0x65, 0xcc, 0xaf, 0xe7, 0x9e, 0x0b, 0x4d, 0xd2, 0x90, 0x34,
		  0x16, 0x52, 0xe1, 0x36, 0x9e, 0xc3, 0xff, 0x67, 0x04, 0x50, 0x2d, 0x1a,
		  0x7d, 0xd6, 0x68, 0x2c, 0x85, 0x82, 0x65, 0xe1, 0x00, 0x68, 0x67, 0x20,
		  0xee, 0x94, 0x78, 0x53, 0xe6, 0x3d, 0xe2, 0x29, 0x2e, 0x73, 0xb5, 0x71,
		  0x32, 0x72, 0x5a, 0xc3, 0x21, 0x52, 0xde, 0x52, 0x3a, 0x99, 0xf8, 0x00,
		  0x23, 0xb0, 0x8e, 0x6a, 0x78, 0x81, 0x9a, 0x63, 0x0c, 0x2c, 0x9a, 0x53,
		  0xb4, 0x74, 0xda, 0x03, 0xfb, 0x91, 0x66, 0x30, 0x3d, 0x92, 0xab, 0x74,
		  0x9c, 0x12, 0x61, 0xbf, 0x3f, 0x24, 0x5c, 0x9e, 0x2d, 0xc8, 0xff, 0xc6,
		  0xe8, 0x66, 0x99, 0x91, 0xdd, 0x1d, 0xb0, 0xe7, 0xdb, 0x92, 0x35, 0x2d,
		  0x9c, 0xaa, 0x53, 0x5e, 0xe2, 0x15, 0x4b, 0x37, 0x0e, 0xb6, 0xeb, 0x9c,
		  0x3e, 0x71, 0x97, 0x29, 0xf7, 0x5b, 0xe3, 0x07, 0x12, 0xe6, 0xa8, 0xf0,
		  0x31, 0xa7, 0x9b, 0x3c, 0x70, 0x25, 0xa0, 0x36, 0x4f, 0xc5, 0xba, 0xb2,
		  0x45, 0x70, 0x16, 0x1e, 0x62, 0x53, 0xaa, 0x9b, 0x34, 0xa5, 0x65, 0x88,
		  0x74, 0xf6, 0x00, 0xc9, 0xa7, 0x89, 0xe5, 0x1e, 0xdd
	};
	sha256_update(&instance, test_data, 213);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x08, 0xff, 0xb7, 0x26, 0x5f, 0x06, 0x9d, 0x69, 0x74, 0x9f, 0x61, 0x9f,
		  0x06, 0xdb, 0x31, 0xd4, 0x0f, 0x5b, 0xe6, 0x8e, 0x7e, 0x5d, 0x29, 0x87,
		  0x05, 0x3e, 0x0e, 0xeb, 0x4b, 0xe0, 0x14, 0xea
	));
}
TEST(SHA256, Test10) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[227] = {
		  0x00, 0x1d, 0xac, 0xec, 0xa5, 0xcc, 0x22, 0x25, 0x72, 0xda, 0xd8, 0x31,
		  0xec, 0x56, 0x3c, 0x9f, 0x3a, 0x9e, 0x5a, 0xb3, 0xf1, 0x24, 0xbf, 0x27,
		  0x77, 0xb7, 0x69, 0x2c, 0x40, 0xcf, 0xb3, 0x91, 0xb1, 0x6e, 0x84, 0x86,
		  0x66, 0xd4, 0x61, 0xa8, 0x45, 0x10, 0xe6, 0xf6, 0xc0, 0x03, 0x6d, 0xdd,
		  0xb1, 0x38, 0x1e, 0x42, 0x38, 0x71, 0x44, 0xca, 0x21, 0x9b, 0x44, 0xc6,
		  0xd2, 0x0c, 0x93, 0x11, 0x3b, 0x7b, 0x77, 0x94, 0x6e, 0x39, 0x64, 0x8a,
		  0xb1, 0xb1, 0xe1, 0xa2, 0x7d, 0x33, 0x51, 0x2b, 0xd5, 0xee, 0x42, 0xdb,
		  0xf6, 0x1e, 0xb2, 0xd1, 0xe5, 0x78, 0xeb, 0x32, 0x23, 0x79, 0x29, 0xad,
		  0x20, 0xa0, 0x1a, 0x22, 0xdf, 0x4d, 0x21, 0x45, 0x70, 0x38, 0x18, 0xf2,
		  0x42, 0xb2, 0x5b, 0x23, 0xcf, 0xf2, 0x8c, 0xdd, 0x0e, 0x0d, 0x5d, 0x76,
		  0xa1, 0xb7, 0xa3, 0x04, 0xca, 0xc8, 0x00, 0xd1, 0x3e, 0xa3, 0x20, 0xde,
		  0xdd, 0xb9, 0x11, 0xf9, 0x7b, 0xdc, 0x83, 0xde, 0xc6, 0xe2, 0x21, 0x83,
		  0xe3, 0x3e, 0xe0, 0xb1, 0x63, 0x95, 0x34, 0xea, 0xba, 0xf2, 0x90, 0xa3,
		  0x81, 0x28, 0xb7, 0x9e, 0x5b, 0x18, 0x89, 0x54, 0x73, 0x99, 0x53, 0xfa,
		  0x68, 0xa0, 0xfc, 0x72, 0xd4, 0x8e, 0xd4, 0xce, 0xee, 0x50, 0x45, 0x9f,
		  0xdb, 0x68, 0x06, 0xcb, 0xca, 0xc6, 0x03, 0x1b, 0x2a, 0x06, 0xb2, 0x55,
		  0xa6, 0x1b, 0x97, 0xbd, 0xfa, 0xd9, 0x6c, 0x99, 0xdb, 0x21, 0xbd, 0xe9,
		  0xae, 0xcb, 0xf2, 0xbd, 0x35, 0xb9, 0xe2, 0xdd, 0x45, 0x5b, 0x11, 0x8d,
		  0xd6, 0x71, 0x6f, 0x42, 0x99, 0x3a, 0x3f, 0xb2, 0xf7, 0xfd, 0xd6
	};
	sha256_update(&instance, test_data, 227);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x52, 0x31, 0xcc, 0xce, 0xc0, 0xe0, 0x03, 0xe8, 0x64, 0x5e, 0xef, 0x97,
		  0x93, 0xdc, 0x53, 0x41, 0x73, 0xd0, 0x10, 0xf6, 0xc1, 0x82, 0xe8, 0xa3,
		  0x31, 0x25, 0x71, 0x30, 0xa0, 0x30, 0xeb, 0xe1
	));
}
TEST(SHA256, Test11) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[46] = {
		  0xf0, 0x98, 0xd7, 0x63, 0x80, 0x6a, 0xf2, 0xfb, 0x02, 0x44, 0xdc, 0x04,
		  0x2f, 0x20, 0x3c, 0x56, 0xe8, 0x86, 0x27, 0x32, 0xcb, 0x3a, 0x51, 0x33,
		  0x68, 0xd4, 0x46, 0x74, 0x30, 0xd3, 0x05, 0xa5, 0x37, 0xf2, 0xa2, 0x93,
		  0x71, 0x93, 0xe0, 0x25, 0xdf, 0xf2, 0xf3, 0xf3, 0x57, 0x3a
	};
	sha256_update(&instance, test_data, 46);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xb1, 0x0d, 0x67, 0xc9, 0x78, 0xee, 0x5e, 0x99, 0x5f, 0x5b, 0x16, 0x44,
		  0x48, 0xaf, 0x0d, 0x6a, 0xcf, 0x51, 0x2d, 0x29, 0x12, 0x68, 0x8b, 0x76,
		  0xb1, 0x8a, 0x0a, 0xb4, 0x52, 0x2b, 0x89, 0xe6
	));
}
TEST(SHA256, Test12) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[224] = {
		  0x1a, 0xba, 0x48, 0x50, 0x31, 0x07, 0x36, 0xad, 0xf4, 0x45, 0x70, 0xc3,
		  0x0b, 0x79, 0x40, 0x0a, 0x38, 0x16, 0x3f, 0x87, 0xc0, 0x62, 0xc2, 0x9f,
		  0xfd, 0x0e, 0x12, 0x96, 0x77, 0xe1, 0xfb, 0xe6, 0x0f, 0xa3, 0x3f, 0x12,
		  0xb9, 0x9f, 0xe9, 0x3e, 0x71, 0xc6, 0x89, 0x30, 0xc0, 0x7a, 0x68, 0x22,
		  0x48, 0x6a, 0x20, 0xcb, 0xf7, 0x07, 0xab, 0x7c, 0x11, 0x9d, 0x44, 0x1e,
		  0x7f, 0x56, 0xb5, 0x7f, 0x98, 0x84, 0x5e, 0xbc, 0xa5, 0x87, 0x65, 0x65,
		  0x49, 0xec, 0xc5, 0x88, 0xde, 0x8f, 0x6c, 0x2e, 0x69, 0x94, 0x13, 0xba,
		  0xe7, 0x0c, 0xbd, 0x6d, 0x32, 0xf8, 0x14, 0xfc, 0xfc, 0x11, 0x24, 0x64,
		  0xad, 0xb2, 0x23, 0x1d, 0x8f, 0xc4, 0xd9, 0x77, 0xbd, 0x5e, 0x98, 0x41,
		  0x89, 0x46, 0xa6, 0xe0, 0x5d, 0x07, 0x81, 0x4d, 0x44, 0xda, 0x56, 0xb2,
		  0x85, 0x4d, 0x5a, 0x99, 0x78, 0xa3, 0x5d, 0x2a, 0x3e, 0xc1, 0x9a, 0x11,
		  0x3c, 0x68, 0xf1, 0x0d, 0x60, 0x88, 0x16, 0x12, 0x33, 0x51, 0xca, 0x16,
		  0x3b, 0x96, 0x68, 0x50, 0x03, 0xc6, 0xfa, 0xe6, 0x0e, 0xb6, 0x52, 0x9e,
		  0xed, 0x86, 0x17, 0x4d, 0x75, 0x98, 0x23, 0xcc, 0x42, 0x10, 0x0e, 0x72,
		  0xfa, 0x7d, 0xd7, 0xb8, 0x09, 0x26, 0x1d, 0x58, 0x1c, 0xbf, 0xe3, 0x05,
		  0xe9, 0x74, 0x20, 0x76, 0xfb, 0xad, 0xc7, 0x27, 0x2b, 0x90, 0xb1, 0x0d,
		  0xfe, 0xea, 0x00, 0xa6, 0xf5, 0x45, 0xef, 0xc6, 0xd8, 0x2c, 0x97, 0xaf,
		  0x3b, 0x37, 0xeb, 0x26, 0x07, 0x8a, 0x00, 0xb2, 0x59, 0x67, 0x9d, 0x86,
		  0x61, 0xc9, 0x73, 0x9d, 0xc0, 0x84, 0xfe, 0x9f
	};
	sha256_update(&instance, test_data, 224);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x7d, 0x07, 0x99, 0xfb, 0x6b, 0xf4, 0x43, 0x7d, 0x4b, 0xc9, 0xaa, 0xae,
		  0xb5, 0xa9, 0x47, 0x47, 0xce, 0x23, 0xd0, 0x46, 0xe7, 0x96, 0x89, 0x02,
		  0xc7, 0xd9, 0xfd, 0xcb, 0x23, 0x56, 0x58, 0x57
	));
}
TEST(SHA256, Test13) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[78] = {
		  0xea, 0x36, 0x37, 0xce, 0x71, 0x20, 0xef, 0x8c, 0x67, 0xec, 0x33, 0xe8,
		  0x29, 0x68, 0x8c, 0xa4, 0x91, 0x0c, 0x16, 0xd4, 0x9b, 0x7b, 0xfe, 0x58,
		  0x0a, 0xf5, 0xb5, 0x9b, 0xe9, 0xd9, 0xe2, 0x0a, 0x6c, 0xaa, 0x79, 0x37,
		  0xc8, 0xa9, 0xbc, 0x33, 0x6f, 0x8f, 0x83, 0x5a, 0xb4, 0xbf, 0xcc, 0x77,
		  0xe5, 0x5c, 0xa7, 0xc4, 0xb9, 0x86, 0xd0, 0x72, 0x49, 0x78, 0xcc, 0x1d,
		  0xdf, 0xa0, 0x23, 0x90, 0x8e, 0x15, 0x1e, 0xbf, 0xae, 0xfb, 0x31, 0x90,
		  0x89, 0xfe, 0x46, 0x80, 0x69, 0x77
	};
	sha256_update(&instance, test_data, 78);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xb7, 0xbf, 0xb8, 0x31, 0xe5, 0xe6, 0x56, 0xc0, 0x32, 0x18, 0x12, 0xec,
		  0xa9, 0xbd, 0x08, 0x1e, 0xe6, 0xd6, 0x7c, 0x13, 0xb5, 0x33, 0x5c, 0x24,
		  0xc3, 0x1e, 0x5d, 0xf6, 0x3e, 0x50, 0x86, 0xa7
	));
}
TEST(SHA256, Test14) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[20] = {
		  0xec, 0x44, 0xc9, 0xe3, 0xe3, 0x9f, 0xb2, 0xb9, 0xbe, 0xf2, 0x00, 0x08,
		  0x6f, 0xd8, 0x65, 0xc4, 0xea, 0xb9, 0x53, 0x87
	};
	sha256_update(&instance, test_data, 20);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x10, 0xab, 0x12, 0x10, 0x6c, 0x41, 0x3a, 0x87, 0xb5, 0xd2, 0x97, 0x64,
		  0x24, 0x36, 0x68, 0xfa, 0xcc, 0x63, 0x83, 0x80, 0x2e, 0xb5, 0x2b, 0x89,
		  0xcd, 0xcb, 0x82, 0x2f, 0x9c, 0xce, 0x9d, 0x56
	));
}
TEST(SHA256, Test15) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[142] = {
		  0x26, 0x8d, 0x62, 0xf0, 0x26, 0x00, 0x6a, 0xcd, 0x44, 0xed, 0xdc, 0xbc,
		  0x2a, 0xe9, 0x72, 0x5a, 0x1f, 0xe4, 0xc6, 0xcb, 0xa6, 0x6e, 0x56, 0x03,
		  0x11, 0xbf, 0x66, 0x2e, 0xbe, 0xdf, 0xa7, 0xb3, 0x80, 0xc2, 0xe0, 0x67,
		  0x1c, 0x38, 0xad, 0x2c, 0x6d, 0x6e, 0xac, 0x34, 0x69, 0x97, 0x0d, 0x76,
		  0x68, 0x07, 0x91, 0x92, 0x05, 0xa9, 0x32, 0xa5, 0x5d, 0xf8, 0x88, 0x4a,
		  0xb4, 0x91, 0x8b, 0xef, 0x38, 0x57, 0x73, 0x29, 0x85, 0xcb, 0x42, 0x4b,
		  0xc6, 0x83, 0x54, 0x25, 0x03, 0x00, 0x7c, 0x1f, 0xb3, 0x99, 0xc0, 0xfe,
		  0xff, 0x1d, 0x10, 0x02, 0xa5, 0xc8, 0x18, 0x6b, 0x1c, 0x75, 0x66, 0x46,
		  0x33, 0xc6, 0x82, 0x83, 0xd1, 0x1d, 0xfb, 0x6f, 0x88, 0x78, 0x2e, 0xb1,
		  0x90, 0xcc, 0xa0, 0x12, 0x91, 0xaa, 0x81, 0xa4, 0xe6, 0x58, 0x36, 0x36,
		  0x63, 0x8e, 0x50, 0xe0, 0x01, 0xbb, 0xaa, 0x5d, 0x01, 0x64, 0xa1, 0x7c,
		  0x7a, 0xfa, 0xab, 0xdd, 0x8a, 0x82, 0xa0, 0xb6, 0x88, 0xca
	};
	sha256_update(&instance, test_data, 142);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x9b, 0x57, 0x28, 0xdd, 0x2c, 0x9a, 0x2c, 0xed, 0x9f, 0x02, 0x1c, 0xe1,
		  0xcf, 0x10, 0x45, 0x56, 0x37, 0xfb, 0xf1, 0xdb, 0xa7, 0x98, 0x16, 0xf6,
		  0x2b, 0x0f, 0xcb, 0x82, 0x80, 0x4c, 0x40, 0xb7
	));
}
TEST(SHA256, Test16) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[241] = {
		  0x7d, 0x66, 0xce, 0x92, 0x4b, 0x28, 0x66, 0x6f, 0x93, 0x43, 0x58, 0xf1,
		  0xa1, 0xd9, 0x93, 0x31, 0x50, 0xdd, 0x0e, 0x5d, 0xac, 0xcc, 0x3b, 0xed,
		  0x06, 0xe6, 0x19, 0x0d, 0xd7, 0x3d, 0x79, 0x7e, 0xa5, 0xfc, 0xf2, 0xd5,
		  0x7e, 0xbb, 0x75, 0xc1, 0x74, 0xdf, 0x59, 0x5c, 0xeb, 0xac, 0xbe, 0x6b,
		  0x9a, 0x17, 0x3a, 0x6c, 0xf7, 0xa3, 0xdb, 0xb0, 0x83, 0x95, 0x7c, 0x09,
		  0xd9, 0xb1, 0x63, 0xd4, 0xea, 0xd6, 0x13, 0xe4, 0x59, 0x17, 0xc2, 0x39,
		  0x4b, 0xf7, 0xbe, 0x9c, 0x36, 0xd3, 0xdb, 0x5d, 0xe7, 0x3e, 0x57, 0x05,
		  0x14, 0x80, 0xa6, 0x55, 0x68, 0xc2, 0xb0, 0xaa, 0x48, 0x27, 0xd6, 0xdd,
		  0x85, 0x1e, 0x44, 0xaa, 0xf8, 0xa0, 0x90, 0x63, 0x0a, 0x3f, 0xfe, 0xb1,
		  0xfb, 0xdb, 0x48, 0x00, 0xe2, 0xd9, 0x44, 0x43, 0xb4, 0x31, 0x67, 0x26,
		  0x47, 0xb8, 0xf0, 0xdc, 0xc2, 0x13, 0x3d, 0xe4, 0x97, 0x44, 0x33, 0x98,
		  0xec, 0x8c, 0xf0, 0x1b, 0x1e, 0x87, 0x62, 0xd6, 0xf5, 0x17, 0xb5, 0xef,
		  0x5e, 0x53, 0x8a, 0x01, 0xef, 0x30, 0xfb, 0x6a, 0x84, 0x43, 0xeb, 0xec,
		  0xf5, 0x3e, 0xf2, 0xf1, 0xa2, 0x71, 0x6f, 0xb3, 0x18, 0x08, 0x5a, 0x8b,
		  0x7b, 0x42, 0x22, 0x55, 0x4a, 0x47, 0xf2, 0xe4, 0xfa, 0x57, 0xb5, 0x46,
		  0x5f, 0xcc, 0xf0, 0x05, 0x18, 0x02, 0xef, 0x77, 0x7b, 0x59, 0xfa, 0xe2,
		  0x80, 0xe4, 0x27, 0x92, 0xa8, 0x66, 0xae, 0x46, 0xab, 0xc3, 0x6a, 0x33,
		  0x65, 0x02, 0x5c, 0x83, 0xd1, 0x32, 0x2d, 0xa2, 0xd6, 0x49, 0xa0, 0x6f,
		  0x7c, 0x6e, 0xf5, 0x77, 0x0a, 0x37, 0xbb, 0xe3, 0x66, 0xff, 0xbf, 0x32,
		  0x67, 0xb5, 0x43, 0xa3, 0x08, 0xbe, 0x57, 0x3a, 0x35, 0x11, 0x6c, 0x3b,
		  0x48
	};
	sha256_update(&instance, test_data, 241);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x8b, 0x65, 0xef, 0xb4, 0xf5, 0x58, 0x4d, 0x9b, 0xf9, 0x4b, 0x2c, 0x9b,
		  0x83, 0x4e, 0x31, 0x35, 0x2c, 0xd2, 0x93, 0x1f, 0xaa, 0x94, 0x3f, 0x88,
		  0x82, 0x5b, 0x8f, 0x74, 0x06, 0x41, 0x5f, 0x43
	));
}
TEST(SHA256, Test17) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[113] = {
		  0xa7, 0x8c, 0x08, 0x6b, 0xb4, 0x71, 0xa1, 0xa2, 0x96, 0x67, 0xce, 0xd8,
		  0xc9, 0xdc, 0x64, 0xe3, 0x01, 0x44, 0x44, 0x0f, 0x56, 0x3b, 0x20, 0x4f,
		  0x3d, 0x7c, 0x8a, 0x0e, 0x44, 0xf9, 0xf4, 0x18, 0x60, 0x5a, 0x68, 0x75,
		  0xfc, 0xfb, 0xbf, 0x55, 0x9f, 0x74, 0x3b, 0x76, 0x7e, 0xef, 0x5c, 0x6e,
		  0xcd, 0xc6, 0x82, 0x08, 0x17, 0x6f, 0x32, 0xc7, 0x9e, 0xed, 0x59, 0x15,
		  0xf1, 0x6b, 0x07, 0x07, 0x5d, 0xf1, 0xf1, 0xb4, 0x3a, 0xd2, 0x58, 0xcf,
		  0x07, 0x0a, 0xcc, 0xad, 0x0d, 0xe0, 0x2a, 0x4d, 0x83, 0x23, 0xd9, 0x56,
		  0x9c, 0x79, 0xbe, 0x83, 0x70, 0xe8, 0x0b, 0x0c, 0x62, 0x84, 0x88, 0xac,
		  0x2a, 0xb7, 0xa9, 0x83, 0x29, 0x0a, 0xb9, 0x90, 0x4b, 0x84, 0xea, 0x72,
		  0x2b, 0x42, 0x2b, 0x66, 0x0a
	};
	sha256_update(&instance, test_data, 113);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xb8, 0x95, 0x31, 0x5f, 0x3c, 0xea, 0x93, 0xbe, 0xd5, 0xfc, 0xa3, 0x65,
		  0x1a, 0xb0, 0x6c, 0xe7, 0x57, 0x45, 0xcf, 0x99, 0x2d, 0xa6, 0x75, 0x72,
		  0x93, 0x3b, 0x20, 0xc7, 0x3f, 0x06, 0x54, 0xf1
	));
}
TEST(SHA256, Test18) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[191] = {
		  0xd2, 0x22, 0x56, 0x2d, 0x24, 0x44, 0x64, 0x59, 0xd9, 0xcc, 0x92, 0xf2,
		  0xe7, 0x33, 0x33, 0x19, 0x12, 0x32, 0xe6, 0x3b, 0xc2, 0xc0, 0x22, 0x8c,
		  0x54, 0x3d, 0x35, 0x44, 0x69, 0x15, 0xd4, 0x9a, 0xdf, 0x0c, 0xb4, 0xa4,
		  0x63, 0xe3, 0x06, 0xdf, 0x7c, 0xe8, 0x4f, 0x0b, 0xe1, 0xbc, 0xfd, 0x47,
		  0x29, 0x99, 0x8b, 0x99, 0xac, 0x1e, 0xbe, 0xe5, 0xe2, 0x32, 0xa8, 0xd9,
		  0x0f, 0xbf, 0xf6, 0xe7, 0xca, 0x53, 0x93, 0xfa, 0xd6, 0xa8, 0xf9, 0x5a,
		  0xb5, 0x90, 0x24, 0xae, 0x73, 0xe1, 0x83, 0x10, 0x51, 0xcb, 0xec, 0x62,
		  0xdb, 0xf2, 0xb6, 0x03, 0xca, 0x8e, 0xae, 0x01, 0x14, 0x7f, 0x03, 0x71,
		  0x6c, 0xee, 0xbd, 0xec, 0xad, 0xf0, 0xb9, 0x74, 0xb9, 0xa1, 0xf2, 0x24,
		  0xbc, 0xde, 0xb6, 0x03, 0xdf, 0x51, 0xec, 0x84, 0xcc, 0x42, 0x96, 0x01,
		  0x22, 0xc8, 0x72, 0x99, 0xee, 0xfa, 0x65, 0xf6, 0x87, 0xbc, 0x94, 0xad,
		  0xe0, 0x71, 0x0a, 0xb4, 0x73, 0xec, 0xef, 0x67, 0xb1, 0x9b, 0xb6, 0x79,
		  0x83, 0x0d, 0x8b, 0x32, 0x6b, 0x6f, 0xbb, 0x6c, 0xfe, 0x9e, 0xa8, 0x8c,
		  0x9e, 0xa3, 0xb8, 0xac, 0x8f, 0x03, 0xe2, 0x04, 0x84, 0x85, 0x63, 0xdb,
		  0x3e, 0x87, 0x44, 0x88, 0xbd, 0x9d, 0x73, 0xef, 0xc9, 0x89, 0x7d, 0x55,
		  0xd3, 0xe7, 0x99, 0x99, 0x61, 0xed, 0xbf, 0xb8, 0x63, 0x64, 0xc8
	};
	sha256_update(&instance, test_data, 191);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x6e, 0x48, 0x3d, 0x57, 0xf2, 0x1e, 0x6b, 0xfa, 0x2b, 0x21, 0x8b, 0x77,
		  0x5b, 0xf2, 0x7b, 0x46, 0x9f, 0xc4, 0x49, 0x43, 0x91, 0x80, 0x24, 0x23,
		  0x49, 0xcd, 0x14, 0x75, 0xe1, 0x09, 0x4d, 0xd0
	));
}
TEST(SHA256, Test19) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[179] = {
		  0xa5, 0x9d, 0xbb, 0x3e, 0xa9, 0xcb, 0xab, 0xfc, 0xe6, 0xb1, 0x3b, 0xc7,
		  0x71, 0x28, 0x21, 0xc5, 0xbe, 0x5c, 0x8d, 0xf9, 0xae, 0xc1, 0x1d, 0xe7,
		  0x30, 0xe6, 0xe7, 0xf8, 0xf2, 0xe2, 0x89, 0x8a, 0xfd, 0xdb, 0x6b, 0xd9,
		  0xed, 0xba, 0x7b, 0xc2, 0x3d, 0xfb, 0x18, 0x3e, 0x4d, 0xb3, 0x9c, 0x74,
		  0xdf, 0x6a, 0xbf, 0x13, 0x63, 0xc8, 0x8b, 0xd3, 0x36, 0xbd, 0x07, 0x7e,
		  0xac, 0x1c, 0x6a, 0x88, 0xe9, 0x12, 0x10, 0x60, 0x1a, 0xdd, 0xe3, 0x3c,
		  0xc2, 0xe6, 0x4c, 0xde, 0x55, 0x28, 0x48, 0xbc, 0xe3, 0xd3, 0xb1, 0xb4,
		  0x45, 0xac, 0x66, 0xc5, 0x3b, 0x9b, 0x83, 0x23, 0xe3, 0x59, 0xfe, 0x13,
		  0x4c, 0x0d, 0x17, 0xaf, 0x0f, 0xd5, 0x75, 0x59, 0xbc, 0x11, 0x21, 0x25,
		  0x46, 0xf1, 0xa6, 0xda, 0x9d, 0x15, 0x61, 0x32, 0xeb, 0x6c, 0xaf, 0x24,
		  0x18, 0xa1, 0xce, 0x7b, 0x6d, 0xb4, 0xcd, 0xf3, 0x81, 0x62, 0x19, 0xb2,
		  0xfd, 0x03, 0x0f, 0x0a, 0x29, 0x35, 0x4e, 0x9e, 0x50, 0x2e, 0x49, 0xf0,
		  0xa6, 0x10, 0x1c, 0x28, 0x14, 0x38, 0x24, 0x77, 0x55, 0x8e, 0xfe, 0xea,
		  0x89, 0x2a, 0xf2, 0xb1, 0xff, 0x25, 0xd6, 0x71, 0xe3, 0x0f, 0xfc, 0x8f,
		  0x63, 0x51, 0x23, 0x8d, 0x32, 0xe1, 0xc7, 0x94, 0x79, 0x29, 0xf2
	};
	sha256_update(&instance, test_data, 179);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x4b, 0x74, 0x51, 0xe4, 0x76, 0x81, 0x7d, 0x84, 0x17, 0xd4, 0x8a, 0x5b,
		  0xc1, 0xc9, 0xff, 0xb0, 0x1f, 0x6b, 0x76, 0xca, 0x0e, 0x2b, 0x83, 0xcf,
		  0x2f, 0xcf, 0x4f, 0xff, 0xc4, 0x74, 0x79, 0x7f
	));
}
TEST(SHA256, Test20) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[256] = {
		  0x1c, 0xfc, 0x2b, 0x52, 0x4e, 0xea, 0xe5, 0xc6, 0xcc, 0x52, 0x71, 0x65,
		  0xd6, 0xc0, 0x1a, 0x3c, 0x48, 0xbe, 0x3b, 0xe4, 0x01, 0x32, 0x84, 0x9a,
		  0x4d, 0xd7, 0xf5, 0x6f, 0xad, 0xe2, 0x5b, 0x00, 0x82, 0xb1, 0x61, 0x2f,
		  0x84, 0x09, 0xb7, 0x56, 0x08, 0x8e, 0xa8, 0x6b, 0xc5, 0x69, 0x1c, 0xe0,
		  0xb2, 0x7d, 0x94, 0x0e, 0x30, 0x50, 0xa7, 0x84, 0x25, 0x5d, 0x57, 0x33,
		  0x18, 0x0c, 0x3d, 0xd9, 0xf0, 0xf9, 0xc5, 0xab, 0x62, 0x84, 0xba, 0x6d,
		  0x93, 0x8e, 0x72, 0x34, 0x84, 0xa4, 0xf7, 0xe6, 0x98, 0x4f, 0xf1, 0x95,
		  0xa0, 0xc1, 0x24, 0xaf, 0x82, 0x50, 0xb8, 0x4f, 0xaa, 0xed, 0x57, 0x85,
		  0x8a, 0x7c, 0xb1, 0x66, 0x13, 0x98, 0xaa, 0xde, 0x9c, 0x6d, 0xd5, 0x0a,
		  0x92, 0xaa, 0x40, 0xf1, 0xc1, 0x12, 0x3e, 0x76, 0xa4, 0xf3, 0xd6, 0x34,
		  0x58, 0xc9, 0xfb, 0xca, 0x3f, 0xaf, 0x25, 0x77, 0x9c, 0x9d, 0x89, 0xe3,
		  0xed, 0xab, 0x34, 0x4d, 0x7e, 0xce, 0x6b, 0xa8, 0xaf, 0x7b, 0x4b, 0x75,
		  0xd0, 0xd8, 0xf4, 0x6f, 0xfa, 0xaf, 0xf1, 0x05, 0x55, 0x21, 0xb7, 0x7c,
		  0x71, 0x81, 0xa1, 0xc5, 0xc5, 0xff, 0xa5, 0xa0, 0x06, 0x97, 0x96, 0xc8,
		  0xb1, 0x07, 0x9d, 0xcf, 0x82, 0x67, 0x72, 0x6a, 0x5a, 0x67, 0xb0, 0x21,
		  0x7b, 0xdd, 0x8e, 0x50, 0xcd, 0x09, 0xfa, 0x00, 0x1d, 0x2b, 0x5e, 0xa9,
		  0x03, 0x0d, 0x8f, 0xd3, 0x4f, 0x90, 0xa4, 0x53, 0x79, 0xe3, 0xc1, 0x62,
		  0x95, 0xd1, 0x59, 0x8b, 0xdb, 0x76, 0xdf, 0x5b, 0x39, 0x5c, 0x8d, 0x0b,
		  0x00, 0x6e, 0xa8, 0x6e, 0x44, 0xd2, 0x88, 0x74, 0x43, 0x1d, 0xb2, 0xda,
		  0xef, 0x21, 0x50, 0x99, 0x13, 0xd7, 0x27, 0x30, 0x8d, 0xe4, 0xef, 0x24,
		  0xcc, 0x44, 0x8c, 0x5e, 0x46, 0x1e, 0xdb, 0xdf, 0x03, 0x35, 0xb0, 0x74,
		  0x9b, 0x60, 0x2b, 0xf8
	};
	sha256_update(&instance, test_data, 256);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x01, 0xf4, 0x79, 0x7e, 0x46, 0x4b, 0xf1, 0x69, 0x05, 0xab, 0x19, 0xd0,
		  0x17, 0xfe, 0x8a, 0x5c, 0x1f, 0x23, 0x09, 0xbe, 0x91, 0xfd, 0x67, 0xe9,
		  0x0e, 0x39, 0xd6, 0xd0, 0xfc, 0xd4, 0xeb, 0x40
	));
}
TEST(SHA256, Test21) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[179] = {
		  0xd4, 0xf6, 0xee, 0xb7, 0x99, 0x98, 0xf3, 0xbe, 0xb5, 0x41, 0x64, 0x89,
		  0x55, 0xba, 0xde, 0x1c, 0x46, 0x08, 0x54, 0xff, 0x44, 0x0c, 0xc1, 0x27,
		  0xe0, 0xc3, 0x8a, 0xc2, 0x31, 0x51, 0x1d, 0x58, 0x86, 0xd1, 0xe7, 0xed,
		  0xd9, 0xf8, 0x21, 0x2d, 0x5a, 0x4d, 0x05, 0x20, 0x8f, 0x71, 0x3a, 0x94,
		  0x83, 0x49, 0x4c, 0x9c, 0x1a, 0xc5, 0xf3, 0x37, 0xed, 0xc9, 0x03, 0x5c,
		  0xcf, 0x38, 0xe2, 0x17, 0xc6, 0x44, 0x92, 0xaf, 0x11, 0xa2, 0x83, 0x5e,
		  0xb4, 0xed, 0x60, 0xeb, 0x96, 0xe6, 0xc8, 0xd5, 0xab, 0x01, 0x6a, 0x84,
		  0x31, 0xc9, 0x71, 0xf9, 0x52, 0x88, 0x97, 0x2e, 0xb6, 0x38, 0x7a, 0xc9,
		  0x5d, 0xd9, 0xd5, 0x73, 0xe6, 0x77, 0x72, 0x68, 0x76, 0x81, 0xcb, 0x8c,
		  0x00, 0x3b, 0x53, 0xbd, 0x53, 0xdd, 0x82, 0x77, 0x54, 0x33, 0x2a, 0x2d,
		  0x27, 0x66, 0x4f, 0x7a, 0x1b, 0x6e, 0x37, 0xc5, 0x58, 0x72, 0xdd, 0x8c,
		  0x2b, 0x3d, 0x3d, 0x58, 0x84, 0xb9, 0x13, 0x71, 0xea, 0xcb, 0xeb, 0x6a,
		  0xe0, 0x34, 0x96, 0xa3, 0xc6, 0xf3, 0xbd, 0x91, 0xcf, 0xb3, 0x68, 0x5a,
		  0x82, 0x1f, 0x8f, 0x59, 0x97, 0x11, 0x22, 0xa6, 0xc6, 0x79, 0x20, 0x93,
		  0xb2, 0x7f, 0x7f, 0x57, 0x8c, 0x56, 0x3f, 0x84, 0x4d, 0x9d, 0x56
	};
	sha256_update(&instance, test_data, 179);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xcc, 0xe7, 0x65, 0x42, 0x56, 0x1f, 0x97, 0x9c, 0x56, 0x66, 0x2b, 0xc4,
		  0xb0, 0x12, 0xa7, 0x6c, 0xd0, 0x24, 0x09, 0x1d, 0x7d, 0xf1, 0x34, 0x1f,
		  0xc0, 0x5d, 0xed, 0x26, 0x2f, 0xd4, 0x4a, 0x37
	));
}
TEST(SHA256, Test22) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[148] = {
		  0xfe, 0x5f, 0xda, 0xfc, 0xd7, 0xe2, 0xe5, 0xa7, 0x3e, 0x99, 0x65, 0x78,
		  0xea, 0x65, 0x15, 0x08, 0xd0, 0x58, 0x86, 0xa2, 0xc5, 0xdd, 0xa2, 0x52,
		  0x03, 0xe6, 0xbe, 0xc8, 0x94, 0xb2, 0x8a, 0x12, 0xca, 0xb1, 0x7b, 0xe5,
		  0x9b, 0x90, 0x0b, 0xc2, 0xf8, 0xda, 0x01, 0x2e, 0x65, 0xf7, 0xea, 0x47,
		  0xdc, 0xdc, 0x98, 0x0f, 0x89, 0x91, 0x90, 0x50, 0x20, 0x80, 0x6f, 0x08,
		  0xf2, 0x34, 0x43, 0x6b, 0xe0, 0x34, 0x16, 0x94, 0x1c, 0x20, 0x53, 0xc3,
		  0xaf, 0x86, 0x50, 0x46, 0x68, 0x3e, 0x85, 0x15, 0xbd, 0x9e, 0x0a, 0xb6,
		  0x54, 0x97, 0x5a, 0xf4, 0xe2, 0x89, 0x2a, 0x41, 0x67, 0x9e, 0x63, 0x36,
		  0x35, 0x63, 0xbb, 0xab, 0x65, 0xe5, 0x30, 0xae, 0xe8, 0x3b, 0x2f, 0x38,
		  0xa7, 0xdb, 0x48, 0xda, 0x96, 0x73, 0xc8, 0xef, 0x02, 0x7c, 0x6b, 0xe4,
		  0x77, 0x52, 0x8c, 0x9f, 0xc9, 0x23, 0x9d, 0x4c, 0x68, 0xb2, 0xe9, 0x47,
		  0x04, 0x10, 0xb8, 0xbe, 0xa9, 0x67, 0x19, 0xe9, 0x31, 0xeb, 0x1d, 0xda,
		  0x56, 0x7a, 0xa2, 0x2e
	};
	sha256_update(&instance, test_data, 148);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xf8, 0xdf, 0x73, 0x4d, 0x55, 0xef, 0x1a, 0xd5, 0xaa, 0x16, 0xfd, 0x91,
		  0x83, 0x1c, 0x77, 0x5f, 0xfc, 0xbf, 0x8e, 0xa4, 0x3d, 0xfd, 0x63, 0x59,
		  0x81, 0x71, 0x83, 0xe4, 0x11, 0xf0, 0x8f, 0x3c
	));
}
TEST(SHA256, Test23) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[263] = {
		  0xb1, 0xd9, 0x80, 0xeb, 0x28, 0x88, 0x32, 0x1a, 0x2c, 0x9d, 0xb6, 0xb9,
		  0x99, 0x69, 0xc7, 0x18, 0x15, 0xef, 0x23, 0x94, 0x01, 0x0e, 0x51, 0xbe,
		  0x0c, 0x99, 0x12, 0x15, 0x5e, 0x9e, 0xce, 0x1e, 0xbc, 0x7c, 0x81, 0x84,
		  0xc8, 0xa2, 0xb9, 0x84, 0x77, 0xd7, 0x42, 0x4c, 0x77, 0xb1, 0xd7, 0x19,
		  0x74, 0x40, 0xd5, 0x0d, 0x89, 0xf3, 0x5f, 0x27, 0x93, 0xfa, 0xd6, 0x07,
		  0x5a, 0x2d, 0x28, 0x53, 0x9f, 0x25, 0x95, 0x86, 0x79, 0xfa, 0xbf, 0x63,
		  0xce, 0x62, 0x11, 0x49, 0xa9, 0x9b, 0x8f, 0xbd, 0xd7, 0x36, 0x72, 0x1b,
		  0x5c, 0x7b, 0xc7, 0xa3, 0x57, 0x8e, 0x13, 0x17, 0xd2, 0x1c, 0x12, 0xf1,
		  0x87, 0xc6, 0xdf, 0x59, 0x13, 0xc7, 0xeb, 0x73, 0x2e, 0xe9, 0x2d, 0x35,
		  0x2f, 0x29, 0x8c, 0x62, 0x79, 0xc9, 0x8c, 0xf0, 0x96, 0x8d, 0x3a, 0xf2,
		  0x0a, 0xc8, 0xab, 0xa7, 0x94, 0x18, 0x51, 0xca, 0x08, 0x1a, 0x02, 0x68,
		  0x3a, 0x33, 0xbc, 0xeb, 0x93, 0xa7, 0xb9, 0x5a, 0xa3, 0x8d, 0xe5, 0x16,
		  0x27, 0xcb, 0xfe, 0x2c, 0xb2, 0xa5, 0xf8, 0x27, 0xa6, 0xb8, 0x59, 0x53,
		  0x43, 0x6a, 0x2a, 0xdf, 0x0f, 0xf3, 0x43, 0x7e, 0x24, 0x2e, 0x0e, 0x0a,
		  0x5b, 0xbc, 0x19, 0x34, 0x4f, 0x33, 0x90, 0x87, 0x37, 0x0a, 0xdf, 0xe4,
		  0x3c, 0xac, 0xbe, 0xf5, 0xc1, 0x1a, 0xe5, 0x3b, 0x9c, 0x1d, 0x03, 0x02,
		  0xe5, 0xa6, 0x3d, 0xc4, 0x9c, 0xe1, 0x06, 0xa6, 0xb6, 0x29, 0x5d, 0xee,
		  0x65, 0x98, 0x46, 0x7e, 0x20, 0x8d, 0xe7, 0xe6, 0xa6, 0x76, 0x5b, 0xd4,
		  0x53, 0xcd, 0x37, 0x50, 0x90, 0xd3, 0x6e, 0xc8, 0x1e, 0xee, 0x6a, 0x13,
		  0x38, 0x6e, 0x34, 0x9d, 0x97, 0xaf, 0xd4, 0x57, 0x09, 0x0d, 0xd2, 0x31,
		  0xdf, 0x2d, 0x94, 0x78, 0xa4, 0x22, 0xb1, 0xbf, 0xea, 0xc6, 0x01, 0x1f,
		  0x70, 0x7b, 0x5c, 0xed, 0x7b, 0x66, 0x13, 0xa7, 0x90, 0x98, 0x4a
	};
	sha256_update(&instance, test_data, 263);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x20, 0xf5, 0x15, 0x63, 0x99, 0x0b, 0x86, 0x7f, 0x0e, 0x3a, 0xa2, 0x82,
		  0x76, 0xeb, 0x4b, 0x7b, 0x16, 0xfa, 0xa5, 0xbc, 0x61, 0xa2, 0x5d, 0x77,
		  0x74, 0x7a, 0xe3, 0xff, 0x17, 0xa4, 0x1c, 0x89
	));
}
TEST(SHA256, Test24) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[234] = {
		  0x93, 0x96, 0x11, 0x33, 0x37, 0x49, 0xe7, 0xae, 0x81, 0x50, 0x90, 0xbd,
		  0xda, 0x68, 0x06, 0xad, 0xc7, 0x76, 0x92, 0x34, 0x0b, 0xad, 0x21, 0x80,
		  0xe1, 0xe4, 0x2f, 0xad, 0x41, 0x7e, 0xad, 0xe9, 0x54, 0xad, 0x78, 0x62,
		  0xa3, 0xd1, 0x64, 0x2c, 0xdf, 0x5c, 0x18, 0xe4, 0xed, 0xf9, 0x35, 0xd3,
		  0x93, 0xc6, 0xd4, 0x30, 0x0b, 0x4a, 0xa8, 0x63, 0x27, 0xe0, 0x15, 0x8c,
		  0x74, 0x0e, 0x4a, 0x1b, 0x4f, 0xdd, 0x5e, 0x8c, 0x2e, 0xd1, 0xba, 0xcd,
		  0x39, 0xa8, 0xf6, 0x36, 0x08, 0x0f, 0x05, 0x2f, 0x44, 0xe0, 0xf7, 0xe6,
		  0x86, 0x5b, 0x57, 0x01, 0xcd, 0xee, 0xc6, 0x78, 0x9d, 0x18, 0xab, 0x84,
		  0xf8, 0x3a, 0xf4, 0xef, 0xc6, 0x47, 0x08, 0xc1, 0xe3, 0x92, 0x13, 0xd3,
		  0x19, 0xd6, 0x8f, 0x37, 0x70, 0x00, 0x36, 0x83, 0x8b, 0xd0, 0x9b, 0x68,
		  0xd5, 0x4b, 0xbe, 0x10, 0x1e, 0xdd, 0x69, 0x86, 0x23, 0x0e, 0xe7, 0xe4,
		  0x6a, 0x91, 0x65, 0xb1, 0xaa, 0xce, 0xad, 0xb4, 0xda, 0x40, 0x1f, 0xab,
		  0x9e, 0xdf, 0xfa, 0xbf, 0x2d, 0x62, 0xf6, 0x91, 0xb0, 0x44, 0xad, 0x10,
		  0xa2, 0xdf, 0x8a, 0xbe, 0xa2, 0xa8, 0x85, 0x97, 0xf8, 0x2b, 0xa5, 0x4e,
		  0x05, 0xde, 0x73, 0x23, 0x1d, 0x0b, 0x8e, 0x45, 0xec, 0xb0, 0x7e, 0x32,
		  0xc6, 0xb8, 0xed, 0xdc, 0x6d, 0x39, 0x68, 0x90, 0xe2, 0x76, 0x87, 0xce,
		  0xea, 0x4b, 0x63, 0x1d, 0x09, 0x05, 0x22, 0x7c, 0x63, 0xed, 0xc3, 0xd1,
		  0x27, 0xb2, 0x6f, 0x27, 0xdd, 0xb9, 0xa2, 0x71, 0x26, 0x3e, 0x14, 0x1f,
		  0xe1, 0x95, 0x8b, 0x9d, 0x0b, 0x20, 0x13, 0x47, 0xa8, 0x4f, 0xeb, 0xa3,
		  0xa0, 0xcd, 0x86, 0xc1, 0x8b, 0x37
	};
	sha256_update(&instance, test_data, 234);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x84, 0x5c, 0x59, 0xc3, 0x8b, 0x81, 0xac, 0x9e, 0x94, 0x04, 0xb0, 0x57,
		  0x59, 0x42, 0xe2, 0xad, 0xae, 0x7d, 0x3d, 0xf9, 0xf9, 0xaf, 0xcc, 0x06,
		  0x01, 0x54, 0xa7, 0x8b, 0x7d, 0x8d, 0xdd, 0xb7
	));
}
TEST(SHA256, Test25) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[140] = {
		  0x99, 0x17, 0x9f, 0x95, 0x3f, 0x82, 0xd8, 0x11, 0xaa, 0x81, 0xe5, 0xf4,
		  0xe6, 0x97, 0x81, 0x61, 0x72, 0x0b, 0xd3, 0x7c, 0x93, 0x6f, 0x58, 0xe3,
		  0x12, 0xd2, 0xee, 0x71, 0x8b, 0x28, 0x6b, 0xae, 0x09, 0x1d, 0x60, 0x1a,
		  0xd4, 0xc2, 0xe3, 0xbf, 0x44, 0x37, 0x6d, 0x1c, 0xc3, 0xbf, 0x44, 0x3d,
		  0xcf, 0x2a, 0x16, 0x7a, 0xc8, 0x5a, 0xe6, 0x6b, 0x24, 0x0e, 0xc6, 0xd7,
		  0xfc, 0xd7, 0x13, 0xc2, 0xfe, 0x7e, 0xae, 0x4a, 0x7e, 0x5a, 0xb1, 0x83,
		  0x5f, 0x5d, 0x15, 0x42, 0x18, 0x37, 0x56, 0xc9, 0x2a, 0x3b, 0x09, 0xd3,
		  0x22, 0xbe, 0xa2, 0x3b, 0x25, 0xa8, 0xdf, 0x86, 0xe2, 0x20, 0x56, 0xc7,
		  0xb4, 0x74, 0x2b, 0x7f, 0xbc, 0xda, 0xb3, 0x83, 0x60, 0x96, 0xb4, 0x64,
		  0xb2, 0x17, 0x0c, 0x29, 0x4d, 0x13, 0x10, 0x14, 0xe8, 0xf8, 0x34, 0x77,
		  0x16, 0xe1, 0xe0, 0xbf, 0xcc, 0xc3, 0x38, 0xdc, 0xea, 0x59, 0xa9, 0xff,
		  0xc2, 0x7f, 0x1f, 0xaa, 0x59, 0xcb, 0xb8, 0xb9
	};
	sha256_update(&instance, test_data, 140);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xa2, 0x3f, 0xcf, 0xc7, 0x03, 0xdd, 0x4d, 0xce, 0x63, 0x53, 0xd1, 0x0d,
		  0x42, 0xb8, 0xef, 0x46, 0x42, 0xb4, 0x99, 0x39, 0x1c, 0x42, 0x0f, 0x4b,
		  0x1d, 0x8d, 0xc5, 0xe2, 0xd1, 0xfb, 0x0a, 0xc5
	));
}
TEST(SHA256, Test26) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[256] = {
		  0xad, 0xf5, 0x75, 0xfd, 0x57, 0x92, 0x8a, 0xe7, 0x0a, 0xfd, 0xc2, 0x99,
		  0xe4, 0xce, 0x7d, 0x47, 0x5b, 0x97, 0x88, 0x94, 0x30, 0x80, 0x21, 0x12,
		  0x31, 0xc3, 0x37, 0xe2, 0x24, 0xa0, 0xae, 0x2f, 0xb7, 0x73, 0x10, 0x5e,
		  0xe6, 0x6e, 0x5e, 0x8e, 0x7e, 0x1f, 0x86, 0x93, 0x63, 0x4e, 0x18, 0x1e,
		  0x67, 0x26, 0xc6, 0x91, 0x85, 0x46, 0x2c, 0x09, 0xf1, 0xe7, 0xb6, 0xad,
		  0x75, 0x34, 0xb7, 0x11, 0x90, 0x8d, 0x47, 0x08, 0x02, 0xef, 0xb5, 0xb7,
		  0x4d, 0x3c, 0x7a, 0xfb, 0x07, 0x12, 0x67, 0x48, 0x88, 0xcf, 0xeb, 0x93,
		  0x38, 0x8b, 0x3f, 0xe1, 0x7f, 0x7f, 0x63, 0x7b, 0x85, 0x15, 0xf4, 0x95,
		  0x09, 0x76, 0x10, 0x8d, 0xa7, 0x1d, 0x88, 0x18, 0x01, 0xd5, 0xdf, 0x1f,
		  0x29, 0xdd, 0xa3, 0x59, 0x10, 0xf9, 0x07, 0x41, 0x07, 0x23, 0xc0, 0xf1,
		  0x96, 0xdd, 0xb5, 0xf5, 0x3c, 0x66, 0xad, 0x06, 0xdd, 0xa1, 0x8a, 0xef,
		  0x24, 0x24, 0xd7, 0x87, 0x15, 0x37, 0xf5, 0x92, 0xb5, 0x26, 0x72, 0xd8,
		  0xdf, 0xf0, 0xdd, 0x88, 0x89, 0xc7, 0x82, 0x6d, 0xf2, 0x14, 0x68, 0xfc,
		  0x3f, 0x06, 0x81, 0x3e, 0x62, 0x5c, 0x7c, 0x4e, 0x7f, 0x26, 0x1e, 0xe8,
		  0xa5, 0x1c, 0x24, 0xf6, 0x6d, 0xb9, 0xe6, 0x15, 0xaa, 0xc3, 0x9c, 0x34,
		  0x1b, 0x6f, 0x60, 0xe3, 0x67, 0xa9, 0xcd, 0x0c, 0x00, 0x0c, 0xe4, 0x5e,
		  0xfa, 0xba, 0xab, 0xfd, 0x6a, 0x5f, 0x19, 0xaf, 0xad, 0xd1, 0x13, 0x5a,
		  0x44, 0x5c, 0xdb, 0x71, 0x85, 0x65, 0x3a, 0x35, 0x2a, 0xfd, 0x8c, 0x8b,
		  0x20, 0xfa, 0x85, 0xc3, 0xe0, 0x3c, 0xc7, 0xed, 0xe3, 0x55, 0x27, 0x90,
		  0xe4, 0x4b, 0xf4, 0x1a, 0x57, 0x7d, 0x3e, 0x0d, 0xeb, 0xd8, 0x8f, 0x13,
		  0x54, 0xef, 0x74, 0xc0, 0x52, 0x12, 0x11, 0xc8, 0x23, 0xf3, 0x4c, 0x01,
		  0x21, 0xbe, 0xf3, 0xdf
	};
	sha256_update(&instance, test_data, 256);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xf5, 0xd6, 0x7d, 0x1e, 0xbe, 0x52, 0x51, 0x42, 0x1b, 0x14, 0x43, 0x4e,
		  0xa2, 0x1b, 0x3e, 0x55, 0x4f, 0x7c, 0x1a, 0xae, 0xfc, 0xeb, 0x44, 0x7b,
		  0xda, 0xf1, 0x22, 0xa0, 0xe2, 0x1a, 0x13, 0x6d
	));
}
TEST(SHA256, Test27) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[226] = {
		  0xc0, 0x57, 0xe7, 0x6e, 0xba, 0x3a, 0x97, 0xec, 0x59, 0xea, 0x06, 0x4f,
		  0x4b, 0xd4, 0x32, 0x64, 0xf7, 0x3e, 0x3e, 0x8f, 0x04, 0x2f, 0xa7, 0x8c,
		  0x75, 0xaa, 0xe2, 0x62, 0xda, 0x8e, 0xfd, 0xa4, 0x48, 0x14, 0x8a, 0x98,
		  0x52, 0x8f, 0x54, 0xb8, 0x45, 0xe5, 0x2f, 0x43, 0x8d, 0xd7, 0x6f, 0x27,
		  0xf1, 0xf3, 0xf8, 0xf8, 0xea, 0x10, 0x40, 0x63, 0xd2, 0x79, 0xc8, 0xbb,
		  0x53, 0xe8, 0x0f, 0x34, 0x2d, 0x64, 0x70, 0x1b, 0x58, 0xcc, 0x79, 0x5f,
		  0xf0, 0xb2, 0x4e, 0xd8, 0xb0, 0xec, 0xb8, 0x12, 0x95, 0xf0, 0x33, 0x8b,
		  0xf0, 0xa3, 0x16, 0x98, 0x85, 0xfd, 0x56, 0x90, 0xc0, 0x7e, 0x22, 0x8d,
		  0x9e, 0x66, 0x90, 0xf9, 0xac, 0xdb, 0xbf, 0x9e, 0x5e, 0xcd, 0x68, 0x1b,
		  0xe6, 0xb9, 0x6c, 0x5f, 0x36, 0x79, 0x5c, 0x2d, 0xf9, 0x02, 0x97, 0x27,
		  0xe9, 0x0a, 0x70, 0x50, 0x2a, 0xea, 0x90, 0xe9, 0x6f, 0xf4, 0x9c, 0x4d,
		  0x2d, 0x9d, 0x55, 0x67, 0x96, 0xca, 0xb7, 0xaa, 0x9d, 0x0f, 0xbf, 0xcc,
		  0x58, 0x04, 0x0f, 0xa0, 0xfd, 0xad, 0xee, 0x0e, 0x17, 0x70, 0x2e, 0x63,
		  0x92, 0xd3, 0xd2, 0x1c, 0x43, 0x96, 0x59, 0x59, 0x80, 0x1e, 0x76, 0x77,
		  0x09, 0x2f, 0x76, 0x75, 0xa0, 0x94, 0x99, 0x60, 0xf5, 0x7d, 0x49, 0x97,
		  0xbe, 0x92, 0x20, 0xbd, 0xbd, 0x3d, 0xdd, 0x31, 0x4c, 0x1d, 0x07, 0x2e,
		  0x5f, 0x4f, 0xed, 0x0b, 0x0b, 0x4e, 0x7a, 0x90, 0xf7, 0x9d, 0xb3, 0xf3,
		  0x4b, 0x8e, 0xb5, 0x8e, 0x61, 0x99, 0x5b, 0x75, 0xf0, 0xdf, 0x73, 0xe3,
		  0xca, 0xe6, 0xe9, 0x68, 0xdb, 0xa0, 0x6a, 0x1f, 0xc8, 0xd4
	};
	sha256_update(&instance, test_data, 226);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x1a, 0x81, 0x0c, 0x41, 0x68, 0x53, 0xe0, 0x68, 0x0a, 0xba, 0xd8, 0xb4,
		  0xce, 0xbe, 0xac, 0x3c, 0x34, 0xb2, 0xbd, 0xd2, 0x63, 0xd3, 0xe8, 0xc3,
		  0x2f, 0x51, 0x29, 0x37, 0x26, 0xbd, 0x52, 0x1c
	));
}
TEST(SHA256, Test28) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[255] = {
		  0x21, 0xbb, 0xe8, 0xd0, 0x44, 0x2b, 0xee, 0x51, 0x96, 0x38, 0xe4, 0x0c,
		  0xe6, 0x08, 0xf3, 0x1c, 0xda, 0x18, 0xc7, 0x79, 0x64, 0x67, 0x10, 0x17,
		  0x4d, 0x0c, 0xc4, 0x89, 0x5f, 0x2c, 0xc9, 0x98, 0x7a, 0x08, 0x29, 0xff,
		  0xa2, 0xf3, 0x99, 0xb5, 0x3f, 0x15, 0x4c, 0x43, 0x60, 0x26, 0xb0, 0x5f,
		  0x8e, 0x3e, 0xe7, 0x1f, 0x21, 0x13, 0x1e, 0x1c, 0xe0, 0xa0, 0xcc, 0x39,
		  0xf0, 0xf1, 0x04, 0x81, 0xff, 0x11, 0x04, 0x61, 0x57, 0x0d, 0xf5, 0x85,
		  0xa2, 0xcd, 0xe9, 0x0a, 0x53, 0xdd, 0x44, 0x9f, 0xc8, 0xeb, 0x06, 0xd0,
		  0xc6, 0x03, 0x8e, 0xf8, 0xa4, 0x20, 0xfe, 0x16, 0x6a, 0x40, 0xe8, 0xd5,
		  0x50, 0x34, 0x87, 0xab, 0x82, 0x58, 0xbf, 0x48, 0x80, 0x97, 0xb9, 0x05,
		  0xca, 0x5f, 0xa6, 0xd7, 0x89, 0xce, 0x43, 0xf2, 0x83, 0xf4, 0x4a, 0x4e,
		  0xa7, 0x2b, 0xe3, 0x4e, 0x0f, 0xfb, 0x59, 0x9d, 0x54, 0x92, 0x9b, 0x22,
		  0x41, 0x4e, 0x49, 0x6d, 0x1f, 0xa6, 0xa6, 0xd3, 0x25, 0x4c, 0xf7, 0xb8,
		  0x10, 0x4c, 0x7f, 0x99, 0xb4, 0x7d, 0x30, 0xa9, 0x99, 0x36, 0x15, 0xd7,
		  0x70, 0xed, 0x2b, 0x9c, 0xad, 0x1e, 0xb3, 0x5d, 0x16, 0x82, 0xc8, 0xe3,
		  0x3d, 0xa3, 0xea, 0x85, 0xe4, 0xf3, 0x9e, 0x71, 0xd2, 0x13, 0xf9, 0xe1,
		  0xec, 0xcc, 0x7d, 0x3a, 0xca, 0xeb, 0xb5, 0xe9, 0xaf, 0xc6, 0x06, 0x49,
		  0xff, 0xb2, 0xe7, 0x00, 0x81, 0x67, 0x7a, 0xd6, 0x32, 0x15, 0xed, 0x94,
		  0x78, 0x4a, 0x08, 0x5a, 0x89, 0x89, 0xde, 0x1b, 0xea, 0x4e, 0xb7, 0xc5,
		  0x39, 0x4f, 0x37, 0xc5, 0xb4, 0xf8, 0x60, 0xf5, 0x0b, 0xb4, 0xe3, 0xf0,
		  0xc4, 0x0d, 0x43, 0x81, 0xc2, 0x7b, 0xe5, 0x80, 0xbf, 0x0c, 0x0b, 0x30,
		  0x06, 0xd2, 0xf3, 0x5c, 0xd3, 0x4e, 0x5c, 0x8a, 0xe6, 0x8c, 0xbc, 0x34,
		  0xf4, 0xa2, 0x15
	};
	sha256_update(&instance, test_data, 255);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xbc, 0xbf, 0x6a, 0x83, 0x8d, 0x60, 0xdb, 0x7d, 0x99, 0x63, 0x3d, 0xe5,
		  0x11, 0xf7, 0xdc, 0xd2, 0x95, 0x4b, 0x2f, 0xfe, 0x19, 0x3b, 0x7b, 0xc3,
		  0xdc, 0xc6, 0x6e, 0xc3, 0x93, 0x44, 0x28, 0x43
	));
}
TEST(SHA256, Test29) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[79] = {
		  0x0f, 0x88, 0xbb, 0x82, 0xfb, 0x32, 0x0f, 0x67, 0x81, 0x45, 0xb9, 0x06,
		  0x51, 0x33, 0x11, 0x7e, 0x1b, 0x65, 0x06, 0x93, 0x32, 0xce, 0x9b, 0xf9,
		  0xbf, 0xe8, 0x28, 0x76, 0xe9, 0x70, 0x11, 0x4a, 0xe0, 0xa6, 0xc9, 0xf6,
		  0xa7, 0x58, 0x01, 0x47, 0x5e, 0x07, 0x63, 0x8c, 0xa7, 0xbc, 0xb4, 0x0d,
		  0x5f, 0xc7, 0xe5, 0xd3, 0xbd, 0x72, 0x36, 0x0a, 0x52, 0x5c, 0x44, 0xfb,
		  0xa1, 0xe5, 0xb2, 0xb5, 0x8a, 0x61, 0x52, 0x85, 0x98, 0x0c, 0xd7, 0x25,
		  0xbc, 0x5b, 0xb3, 0x88, 0x1a, 0xce, 0x83
	};
	sha256_update(&instance, test_data, 79);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xa7, 0xe2, 0xc6, 0xbc, 0xf5, 0x21, 0x8a, 0x74, 0x6e, 0x45, 0xc1, 0xb2,
		  0x39, 0x25, 0x09, 0x86, 0xdc, 0xa3, 0x74, 0x60, 0xa4, 0xb1, 0x42, 0xad,
		  0xba, 0x31, 0x40, 0xec, 0x80, 0x74, 0x05, 0x5a
	));
}
TEST(SHA256, Test30) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[37] = {
		  0x1f, 0xc4, 0xc7, 0x1a, 0x9c, 0x43, 0xef, 0xb0, 0x51, 0x4f, 0x29, 0x11,
		  0xe7, 0x36, 0xc7, 0xa5, 0xb9, 0x9e, 0x63, 0xa8, 0xb9, 0x8f, 0x0f, 0xc5,
		  0x3d, 0x14, 0xb2, 0x36, 0xaa, 0x62, 0x8f, 0x94, 0x1f, 0xf1, 0x1e, 0x0b,
		  0x77
	};
	sha256_update(&instance, test_data, 37);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x64, 0x46, 0xd1, 0x56, 0x69, 0xf1, 0x60, 0xf7, 0x64, 0x68, 0x40, 0x64,
		  0x5f, 0xf3, 0x98, 0x08, 0xbf, 0x68, 0xc1, 0x8f, 0x60, 0x0a, 0xf4, 0xb1,
		  0xae, 0x63, 0x71, 0x68, 0x48, 0xb1, 0x9c, 0xd4
	));
}
TEST(SHA256, Test31) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[258] = {
		  0x8e, 0xd5, 0xcc, 0xee, 0xaa, 0xb7, 0x70, 0xf3, 0x60, 0x6f, 0x0d, 0x66,
		  0x91, 0x69, 0x87, 0xee, 0x88, 0x45, 0x69, 0x17, 0xde, 0xbc, 0xb9, 0x24,
		  0x2b, 0x5c, 0x53, 0xdb, 0x67, 0x32, 0xbd, 0xcc, 0x06, 0xb9, 0x65, 0xa8,
		  0x86, 0xb3, 0x55, 0x20, 0x84, 0x34, 0xfe, 0xec, 0x45, 0x9f, 0x6c, 0x6a,
		  0x71, 0x0b, 0xc5, 0x23, 0x51, 0x01, 0x74, 0x60, 0xad, 0x73, 0x8d, 0xd9,
		  0x3a, 0x93, 0x06, 0xea, 0xf7, 0x08, 0x6b, 0xf0, 0x0c, 0x42, 0x37, 0x67,
		  0x07, 0x76, 0xa1, 0xd9, 0xe8, 0xdb, 0xf7, 0x35, 0x03, 0xdc, 0x75, 0xd2,
		  0x26, 0xdd, 0x1d, 0xab, 0x17, 0x33, 0xea, 0x43, 0x5a, 0xa4, 0x56, 0x12,
		  0xd5, 0x32, 0x84, 0x91, 0xf8, 0x29, 0x7a, 0xff, 0x08, 0xac, 0x8b, 0x78,
		  0xd5, 0xdf, 0x73, 0xd0, 0x4a, 0xb5, 0x84, 0x97, 0x8c, 0x17, 0x3e, 0x9b,
		  0x00, 0x88, 0xad, 0x9f, 0x23, 0xc7, 0x00, 0xa6, 0x22, 0xee, 0x5d, 0x62,
		  0xb4, 0x56, 0x97, 0x46, 0x41, 0xca, 0x88, 0x53, 0x59, 0x46, 0xe5, 0x84,
		  0x80, 0x4b, 0x43, 0x6c, 0xc2, 0x4a, 0x4a, 0x10, 0xf2, 0x68, 0xbb, 0x31,
		  0xa0, 0xd1, 0x5e, 0x41, 0xdb, 0xcd, 0x62, 0xac, 0x4a, 0x0b, 0x65, 0x2e,
		  0xc6, 0x21, 0x21, 0x58, 0x51, 0xd9, 0x94, 0x63, 0x59, 0x31, 0x5a, 0xea,
		  0x42, 0xef, 0x37, 0x52, 0x88, 0xe7, 0x88, 0x19, 0x93, 0x2c, 0xb2, 0xaf,
		  0x2d, 0xae, 0xbe, 0x70, 0x04, 0x40, 0x7c, 0xc1, 0xce, 0x2f, 0x9d, 0x37,
		  0xf9, 0x77, 0x75, 0xf5, 0x55, 0xc9, 0xfe, 0xc4, 0x5b, 0x6d, 0x3d, 0xc7,
		  0x57, 0xb4, 0x6d, 0xa4, 0x9e, 0x19, 0x80, 0xfd, 0xa5, 0xef, 0x34, 0x00,
		  0xa8, 0x45, 0x1e, 0x04, 0x6e, 0x0c, 0xa4, 0xcc, 0x22, 0x45, 0x6c, 0xa9,
		  0x80, 0xcd, 0x5a, 0x3f, 0x2b, 0x48, 0x2c, 0xd8, 0x60, 0xcf, 0x03, 0x3e,
		  0x8a, 0x44, 0x7b, 0x0a, 0x5e, 0x84
	};
	sha256_update(&instance, test_data, 258);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x1e, 0x4f, 0x4c, 0xf7, 0x93, 0xf9, 0x97, 0xc7, 0xf8, 0x3b, 0x45, 0x52,
		  0x07, 0x26, 0xe2, 0x6c, 0x0a, 0x36, 0xe8, 0xb6, 0x42, 0x7c, 0x6f, 0xcb,
		  0xf5, 0x02, 0xd6, 0xea, 0x0b, 0x69, 0x82, 0xbc
	));
}
TEST(SHA256, Test32) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[250] = {
		  0x0f, 0x39, 0xfe, 0x37, 0xd6, 0xb5, 0x8c, 0xa8, 0x69, 0x7c, 0xd9, 0x86,
		  0x53, 0x13, 0x55, 0x9a, 0x8f, 0xf7, 0x78, 0x14, 0xc2, 0xc5, 0xca, 0x12,
		  0x23, 0x0e, 0xd7, 0xaf, 0x1b, 0xe4, 0x03, 0x42, 0x28, 0x6f, 0x98, 0x5e,
		  0x34, 0x10, 0x75, 0x29, 0xe2, 0xd6, 0x2f, 0x18, 0xc4, 0x4e, 0xd6, 0x75,
		  0x0c, 0xfc, 0xb6, 0x56, 0xa0, 0x85, 0xa5, 0x8b, 0x85, 0x35, 0x66, 0xfc,
		  0xf6, 0xdd, 0xa6, 0xb3, 0x34, 0x22, 0x06, 0xb6, 0x60, 0x99, 0xa4, 0x38,
		  0xa0, 0x8d, 0x5c, 0xa2, 0x85, 0x75, 0x28, 0x7b, 0x15, 0x12, 0x08, 0x0c,
		  0xb7, 0xd9, 0x32, 0x4d, 0x14, 0x13, 0x4f, 0x86, 0x27, 0xdd, 0x29, 0xcf,
		  0x3f, 0xe8, 0x89, 0xa4, 0x1a, 0xd5, 0xd4, 0x2e, 0xb7, 0x75, 0x8d, 0xe6,
		  0x9e, 0x6b, 0x5f, 0x62, 0x13, 0xf5, 0x63, 0x22, 0xf9, 0xb3, 0x33, 0xd5,
		  0x21, 0x12, 0x13, 0x34, 0x6c, 0xe8, 0x63, 0x18, 0xbe, 0x0e, 0xbf, 0x00,
		  0x54, 0x5e, 0xee, 0x27, 0xcf, 0xf7, 0x20, 0xf5, 0x0a, 0xd8, 0x70, 0x01,
		  0x1b, 0x19, 0x8e, 0xb0, 0xdb, 0x54, 0xce, 0x42, 0xb2, 0xc1, 0x21, 0xde,
		  0x04, 0x72, 0xe0, 0xc8, 0xe2, 0xfc, 0xd6, 0x82, 0xef, 0x3d, 0x3d, 0xe7,
		  0x6d, 0x40, 0x3d, 0x72, 0xdf, 0x0c, 0x9c, 0x4f, 0x6e, 0x57, 0xb9, 0xdf,
		  0x79, 0xf5, 0xa7, 0x93, 0xc7, 0x0a, 0x42, 0xc1, 0xc7, 0x07, 0x3f, 0xe0,
		  0x4f, 0x77, 0xf2, 0xd6, 0x84, 0xfd, 0x4f, 0xff, 0x29, 0x8b, 0xb7, 0x3d,
		  0xa2, 0x40, 0x36, 0xee, 0xba, 0xfe, 0xe7, 0xe4, 0x06, 0xdd, 0x05, 0x7d,
		  0x15, 0xed, 0xbb, 0xf5, 0xf8, 0x38, 0x2a, 0x57, 0x50, 0x95, 0x16, 0x88,
		  0x2c, 0x38, 0x62, 0x8d, 0xdd, 0x9f, 0x4a, 0xe0, 0xdc, 0xc8, 0x27, 0x4b,
		  0xa9, 0x61, 0x76, 0xcc, 0xef, 0x63, 0xc6, 0xf4, 0xf3, 0xc9
	};
	sha256_update(&instance, test_data, 250);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xea, 0xba, 0xff, 0x81, 0xac, 0x76, 0xd3, 0x65, 0x96, 0x19, 0x2e, 0x24,
		  0xd0, 0xff, 0xa8, 0x04, 0x9c, 0x23, 0xd0, 0xe1, 0xeb, 0xeb, 0xd7, 0x22,
		  0x06, 0xf3, 0x3d, 0xae, 0x30, 0x29, 0xc9, 0x9c
	));
}
TEST(SHA256, Test33) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[71] = {
		  0x52, 0xea, 0x29, 0xf5, 0x86, 0x5d, 0x61, 0x57, 0xb4, 0x19, 0xfd, 0x8a,
		  0xc7, 0xc9, 0x11, 0xc9, 0xe9, 0x0b, 0xfa, 0x22, 0x0c, 0x64, 0xc9, 0xcd,
		  0x6b, 0x99, 0x5c, 0x36, 0x7f, 0x24, 0x2c, 0xc2, 0xec, 0x30, 0x0c, 0x1b,
		  0x8b, 0xea, 0x03, 0xa9, 0x38, 0xb0, 0xfb, 0x28, 0x99, 0xc8, 0xaa, 0x71,
		  0x63, 0xee, 0x3d, 0xf4, 0xd9, 0x10, 0x80, 0xb9, 0x32, 0x6b, 0xa6, 0xbe,
		  0xbe, 0x2f, 0xd8, 0x8e, 0x87, 0x5f, 0xed, 0x47, 0xea, 0x46, 0xfc
	};
	sha256_update(&instance, test_data, 71);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x09, 0x0d, 0xa0, 0xce, 0xb3, 0x43, 0x4f, 0xc9, 0x3b, 0x4c, 0x71, 0x30,
		  0x4c, 0x61, 0xe3, 0xc8, 0x30, 0x8c, 0x60, 0xeb, 0xbb, 0xcb, 0x30, 0x4e,
		  0x59, 0x29, 0x0d, 0x66, 0x2b, 0xe8, 0xb2, 0xf6
	));
}
TEST(SHA256, Test34) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[50] = {
		  0xcb, 0x76, 0xa4, 0xa7, 0x96, 0xf4, 0x01, 0xe3, 0x48, 0x53, 0xb0, 0xa4,
		  0xf9, 0x0a, 0xf9, 0xcf, 0xcb, 0x8a, 0x17, 0xc8, 0xe7, 0x86, 0x81, 0xdf,
		  0xc6, 0xe6, 0xe4, 0x2a, 0x68, 0xda, 0x67, 0x4b, 0x2d, 0xef, 0x95, 0x95,
		  0xa7, 0x3d, 0xb3, 0xe6, 0xeb, 0x16, 0x75, 0xdb, 0xe3, 0xf2, 0xfd, 0x8a,
		  0x9f, 0x13
	};
	sha256_update(&instance, test_data, 50);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xc1, 0xfd, 0x86, 0x43, 0xb1, 0x14, 0x97, 0x71, 0x06, 0x92, 0x35, 0xa6,
		  0xa6, 0xef, 0x0e, 0x87, 0xa7, 0xcb, 0xae, 0x76, 0xf3, 0xda, 0x3a, 0x6f,
		  0xb4, 0x8e, 0x2b, 0x10, 0xc8, 0xa1, 0xf3, 0xaa
	));
}
TEST(SHA256, Test35) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[177] = {
		  0x3a, 0x1a, 0xf2, 0x30, 0xd1, 0x66, 0xb6, 0x65, 0xe3, 0x64, 0xe4, 0x3b,
		  0x0a, 0x92, 0x31, 0x7f, 0x4d, 0x3b, 0xcb, 0xc2, 0x48, 0x42, 0x23, 0x5b,
		  0x49, 0x7c, 0x51, 0xc7, 0x4d, 0xef, 0xd2, 0x30, 0x8d, 0x92, 0xc4, 0x2a,
		  0x67, 0x0c, 0xfc, 0x2d, 0x7f, 0x1a, 0x6d, 0xf9, 0x18, 0x8e, 0x08, 0x8f,
		  0x5f, 0x37, 0x0b, 0x17, 0x20, 0xad, 0xfd, 0xf0, 0x7f, 0x62, 0xf4, 0x15,
		  0x75, 0x76, 0x5f, 0x4d, 0x43, 0x6c, 0xe7, 0x58, 0xff, 0x53, 0xc2, 0x47,
		  0xd0, 0x75, 0x24, 0xe4, 0x75, 0x9e, 0x15, 0xea, 0xf4, 0x66, 0x78, 0x2e,
		  0x70, 0xf7, 0x16, 0xa4, 0xec, 0x82, 0x0b, 0x67, 0xe6, 0xd3, 0xc7, 0xa7,
		  0x4a, 0x14, 0x67, 0xc1, 0x45, 0xb3, 0xc0, 0x70, 0xf1, 0x5a, 0xe0, 0xd0,
		  0x9f, 0xc3, 0x76, 0x79, 0x85, 0xd8, 0x11, 0xb4, 0x7f, 0x94, 0x91, 0x08,
		  0x22, 0x2a, 0x4e, 0xbf, 0x69, 0xba, 0x23, 0xa7, 0x97, 0xea, 0x20, 0x3e,
		  0xd6, 0x47, 0x2d, 0x40, 0xa3, 0x6e, 0x23, 0x98, 0x0d, 0x6b, 0xba, 0xa4,
		  0xf4, 0x9d, 0x32, 0x97, 0xbf, 0x57, 0x14, 0x7d, 0x29, 0x34, 0x0f, 0x20,
		  0xda, 0x67, 0x99, 0xab, 0x5c, 0xc2, 0x5c, 0xa2, 0x2f, 0x50, 0x01, 0x70,
		  0x9a, 0xe2, 0xae, 0x4d, 0xa5, 0xb6, 0x7e, 0x43, 0x16
	};
	sha256_update(&instance, test_data, 177);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xe7, 0x1e, 0xcf, 0xe7, 0x06, 0xa9, 0xb7, 0x79, 0x6e, 0x1f, 0x3e, 0x0d,
		  0x98, 0xf3, 0xb4, 0xb9, 0x26, 0x56, 0x31, 0xa8, 0x2b, 0x34, 0x84, 0xd0,
		  0x0e, 0x58, 0x68, 0x31, 0x7a, 0x85, 0x66, 0xfe
	));
}
TEST(SHA256, Test36) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[207] = {
		  0x52, 0x87, 0x5f, 0xf7, 0x39, 0x8a, 0xc7, 0xb2, 0x20, 0x04, 0xc9, 0x0e,
		  0x8c, 0x0a, 0x70, 0x92, 0xbc, 0x07, 0xec, 0xc1, 0xd6, 0xf4, 0x28, 0x80,
		  0xd5, 0xe3, 0x15, 0x00, 0x1c, 0x1a, 0x65, 0xf7, 0x6e, 0xa1, 0x56, 0x3f,
		  0xdb, 0x3a, 0xc9, 0x5f, 0x38, 0x69, 0x99, 0x99, 0x07, 0xf9, 0xfa, 0xc8,
		  0x1d, 0x5a, 0x16, 0x3d, 0x97, 0x2d, 0x86, 0x4f, 0x78, 0xb8, 0xcb, 0xe0,
		  0x46, 0xf7, 0xec, 0xb2, 0xde, 0x18, 0xc3, 0x3e, 0x55, 0xc4, 0x0e, 0x2c,
		  0xf9, 0x5e, 0xe8, 0xac, 0x88, 0xaa, 0x58, 0x3c, 0x79, 0xac, 0x84, 0x8d,
		  0x2c, 0xb6, 0x18, 0xbd, 0x74, 0x98, 0xed, 0x10, 0x69, 0xa0, 0xd4, 0x55,
		  0xe8, 0x6a, 0xb9, 0xdc, 0x68, 0x5a, 0x85, 0x1f, 0xe9, 0xcb, 0x67, 0xfb,
		  0xbf, 0x21, 0x62, 0x9b, 0x02, 0xc6, 0x38, 0x30, 0xa3, 0x4e, 0x4b, 0x52,
		  0x85, 0x77, 0x05, 0xce, 0x3e, 0x48, 0x39, 0x75, 0xa4, 0xbb, 0x74, 0xb3,
		  0xec, 0x1b, 0x40, 0x0f, 0x97, 0x51, 0x9b, 0xdb, 0x3b, 0x05, 0xea, 0x98,
		  0x87, 0xa8, 0xe6, 0xe1, 0x30, 0xb1, 0x3d, 0xc7, 0xa9, 0xd0, 0x4a, 0xe0,
		  0x69, 0xa6, 0x5d, 0xe8, 0x7e, 0xb1, 0xfa, 0x09, 0x2d, 0x59, 0xe6, 0x68,
		  0x20, 0xe7, 0x2b, 0x83, 0x45, 0x0d, 0xb2, 0x93, 0xcc, 0x16, 0x33, 0x11,
		  0x76, 0xb8, 0x64, 0x7c, 0xdf, 0x19, 0x32, 0x67, 0xda, 0xf7, 0x5d, 0x4f,
		  0x7c, 0x8d, 0x19, 0x52, 0xfa, 0x3d, 0xcf, 0x7a, 0x0d, 0x3f, 0x04, 0xa9,
		  0x8f, 0x99, 0x7e
	};
	sha256_update(&instance, test_data, 207);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xa2, 0x83, 0x64, 0x57, 0x55, 0xc0, 0x7f, 0x98, 0x33, 0xc0, 0x86, 0x56,
		  0x2a, 0x1c, 0x15, 0xa5, 0x4e, 0x29, 0xc4, 0x3b, 0xb6, 0x31, 0x2c, 0xfc,
		  0xd0, 0xcc, 0xd4, 0x81, 0x7f, 0x84, 0xfc, 0x36
	));
}
TEST(SHA256, Test37) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[260] = {
		  0x5e, 0xf7, 0xc8, 0x12, 0x75, 0xc5, 0xe6, 0xf2, 0xaf, 0xcc, 0x86, 0xbd,
		  0x6d, 0x19, 0x3b, 0x3d, 0x57, 0xdd, 0x8f, 0xcd, 0x3f, 0xa1, 0x8d, 0x1e,
		  0x3b, 0x6b, 0x58, 0x10, 0x22, 0x9d, 0x66, 0x97, 0x67, 0x04, 0xc9, 0x29,
		  0x3c, 0x2f, 0x58, 0xd0, 0xa9, 0x67, 0x90, 0x24, 0x66, 0x05, 0xec, 0x7b,
		  0x21, 0x9f, 0x01, 0xab, 0x2a, 0x77, 0x55, 0x31, 0x28, 0x2a, 0xf5, 0x65,
		  0xe2, 0x9a, 0xe0, 0xa3, 0x12, 0x91, 0x68, 0xdf, 0xa5, 0x01, 0xa9, 0xf5,
		  0xae, 0x4f, 0xca, 0xf3, 0x2e, 0xf6, 0xf4, 0xc7, 0x00, 0xa9, 0x7d, 0x95,
		  0x55, 0xef, 0x00, 0x8f, 0x4a, 0x24, 0x35, 0x93, 0x7f, 0x2a, 0xff, 0x1f,
		  0x6e, 0xae, 0xc1, 0xb2, 0xd7, 0x5a, 0xdf, 0x6e, 0x27, 0xfe, 0x36, 0xb6,
		  0x80, 0xfc, 0xfc, 0xb6, 0xe8, 0x6f, 0xb8, 0x6d, 0x34, 0xe8, 0x3b, 0x02,
		  0xe7, 0xfe, 0xca, 0xca, 0xea, 0x1e, 0xd9, 0x69, 0x28, 0xea, 0x0a, 0xfd,
		  0x10, 0x0e, 0x42, 0x01, 0x06, 0x08, 0xe8, 0xd2, 0x73, 0x33, 0xe1, 0x4d,
		  0x4e, 0x5d, 0xa2, 0x5c, 0x91, 0x65, 0x4d, 0x95, 0xb7, 0xc0, 0xc4, 0x72,
		  0x2f, 0xe8, 0xa6, 0xba, 0xaa, 0x0a, 0xfa, 0x0f, 0x49, 0xf0, 0x6c, 0xb7,
		  0x9b, 0xd0, 0x1a, 0xa3, 0x85, 0xeb, 0x88, 0xb0, 0x43, 0x19, 0x74, 0xf9,
		  0xc1, 0x9a, 0x7b, 0xb2, 0xd3, 0xcc, 0x0e, 0xe2, 0xde, 0x22, 0x06, 0x74,
		  0xbe, 0x5a, 0x7a, 0x26, 0xf7, 0x61, 0x19, 0x3a, 0x30, 0x95, 0x6f, 0xee,
		  0x9e, 0x67, 0xea, 0x2a, 0xf8, 0xb6, 0xab, 0x64, 0xc0, 0x1c, 0x88, 0xc6,
		  0x84, 0x99, 0xa3, 0xff, 0x73, 0xda, 0x83, 0x55, 0xd0, 0x2a, 0xba, 0x43,
		  0xa8, 0x33, 0x8d, 0xac, 0xff, 0x7c, 0xb3, 0x78, 0x0c, 0x36, 0xe3, 0x22,
		  0xbc, 0x43, 0xd6, 0x87, 0x47, 0x3d, 0xc2, 0x28, 0x71, 0x1b, 0x1b, 0x3f,
		  0x88, 0x74, 0xd5, 0xed, 0xf4, 0x53, 0x1a, 0x67
	};
	sha256_update(&instance, test_data, 260);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xdd, 0x05, 0x2a, 0xe8, 0x08, 0x81, 0xa0, 0xb0, 0x2e, 0x19, 0xd2, 0x14,
		  0x3c, 0x59, 0xa2, 0xd9, 0xc6, 0xa8, 0xcb, 0x59, 0x36, 0x92, 0x36, 0xdc,
		  0x43, 0x05, 0xf8, 0x43, 0x62, 0x90, 0x41, 0xbf
	));
}
TEST(SHA256, Test38) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[265] = {
		  0xee, 0x95, 0x99, 0x15, 0x03, 0x1a, 0xd7, 0x8a, 0xe8, 0xcb, 0x2c, 0x93,
		  0x22, 0x9c, 0x5a, 0x55, 0x3b, 0xe0, 0xf3, 0x59, 0x48, 0x8c, 0x37, 0xec,
		  0x65, 0xc4, 0x5a, 0x7d, 0x4a, 0x58, 0x98, 0x23, 0x8b, 0x91, 0x53, 0x20,
		  0xb0, 0xa8, 0xdf, 0xb3, 0xe4, 0xac, 0xeb, 0x7d, 0x91, 0x55, 0x82, 0x0b,
		  0x54, 0xce, 0x5e, 0x54, 0x9c, 0xcd, 0x04, 0x1a, 0x6b, 0x62, 0x6a, 0x70,
		  0xdb, 0x92, 0xc3, 0xaa, 0xbb, 0xc4, 0xe7, 0xdf, 0x83, 0x04, 0x27, 0xb2,
		  0xfb, 0x8a, 0xf8, 0xc9, 0x50, 0x0c, 0x78, 0xf7, 0xc5, 0x12, 0x9e, 0x97,
		  0x0b, 0x95, 0xae, 0x32, 0x7d, 0xa7, 0x0a, 0xec, 0x34, 0xf5, 0x0b, 0x29,
		  0xf0, 0xd2, 0x05, 0xba, 0x5e, 0x47, 0x6d, 0xa9, 0x86, 0xb7, 0x2c, 0xc0,
		  0x7a, 0x92, 0x82, 0x1b, 0x47, 0xd1, 0x75, 0x1f, 0x91, 0x5a, 0xaf, 0x30,
		  0xbd, 0xd2, 0x14, 0x67, 0x56, 0xe9, 0x4e, 0x12, 0x6f, 0x67, 0xdb, 0xb1,
		  0x59, 0xf6, 0x76, 0x9c, 0x75, 0x54, 0xa6, 0xbb, 0x0f, 0x8f, 0x35, 0x29,
		  0xc6, 0x5b, 0xa7, 0x9b, 0xc9, 0x1a, 0x19, 0xbf, 0x6b, 0xc2, 0xbd, 0x9c,
		  0xec, 0xce, 0x78, 0x2a, 0x84, 0x10, 0x8e, 0x50, 0x97, 0xb5, 0x7c, 0x29,
		  0x0c, 0xf6, 0x47, 0x43, 0xa0, 0x5a, 0xa4, 0xef, 0xc8, 0xe8, 0x37, 0x39,
		  0xb5, 0x5a, 0x6e, 0x36, 0x0f, 0x37, 0x91, 0x9f, 0xd5, 0xfe, 0x4c, 0xe7,
		  0xc0, 0xc0, 0x8b, 0x9a, 0x29, 0xd2, 0xdf, 0x90, 0x0e, 0xed, 0xe6, 0x68,
		  0x44, 0xaf, 0x08, 0x67, 0x6f, 0x7e, 0x96, 0x63, 0xf3, 0x39, 0x92, 0xbc,
		  0x85, 0x17, 0x0e, 0xd5, 0x28, 0x19, 0xc5, 0x8c, 0x7b, 0x47, 0x7e, 0xb9,
		  0xc4, 0x27, 0xe0, 0xc7, 0xf0, 0xee, 0xbf, 0xd8, 0x25, 0x30, 0xdf, 0x15,
		  0x77, 0x10, 0x60, 0xad, 0x61, 0xb3, 0x81, 0xac, 0x37, 0x15, 0x34, 0x8e,
		  0xd1, 0x14, 0x6f, 0x32, 0x0a, 0x32, 0xf6, 0x9f, 0xd5, 0x8b, 0x26, 0xd0,
		  0x85
	};
	sha256_update(&instance, test_data, 265);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x20, 0x4d, 0x54, 0x5c, 0x1e, 0x75, 0x79, 0xac, 0xec, 0xd7, 0x6d, 0xdb,
		  0xfe, 0x52, 0x70, 0x2c, 0xa4, 0xc3, 0x16, 0xb2, 0xf3, 0xf3, 0x0a, 0xa2,
		  0x9d, 0x3c, 0xa1, 0xf3, 0x85, 0xe2, 0x5e, 0x6f
	));
}
TEST(SHA256, Test39) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[229] = {
		  0xc9, 0x0f, 0x6e, 0xa3, 0xa6, 0x26, 0x6f, 0x1a, 0xea, 0x7b, 0xaf, 0x41,
		  0xa9, 0x59, 0xf0, 0x1e, 0x0d, 0x59, 0xf4, 0xa9, 0x2d, 0x25, 0x24, 0xc5,
		  0xf1, 0x4b, 0x71, 0xcc, 0xe3, 0x7d, 0xc8, 0xe8, 0xdb, 0x7c, 0xdc, 0xa0,
		  0xb4, 0x5a, 0x51, 0x22, 0x34, 0x75, 0x53, 0x7c, 0x85, 0xf4, 0x9b, 0xdc,
		  0x51, 0xe5, 0x52, 0x71, 0x05, 0xd3, 0x44, 0x56, 0xf2, 0x5f, 0xea, 0x9a,
		  0xd2, 0x47, 0xf9, 0x22, 0xe8, 0x9a, 0x09, 0x9e, 0x83, 0xc5, 0x12, 0x7d,
		  0xc0, 0x88, 0xf7, 0x1a, 0x58, 0x31, 0xaf, 0xd1, 0xe1, 0xb0, 0xc9, 0x22,
		  0xa9, 0x54, 0x92, 0xac, 0x44, 0xf4, 0xed, 0x76, 0x88, 0xe1, 0x59, 0x84,
		  0x7a, 0x24, 0xfa, 0x96, 0xb8, 0xd1, 0xf5, 0x1c, 0xc6, 0xe9, 0x40, 0xc2,
		  0xb9, 0x03, 0x5f, 0xb8, 0xd9, 0x3f, 0x79, 0x43, 0x6c, 0x32, 0x3b, 0x47,
		  0x0b, 0xd0, 0x71, 0xe5, 0xdb, 0xc4, 0x0f, 0xf6, 0x3c, 0x5b, 0xc8, 0xf8,
		  0xfc, 0xbc, 0xfe, 0x30, 0xb3, 0xd7, 0xe5, 0x95, 0x6a, 0x12, 0x79, 0x78,
		  0xca, 0xc8, 0x31, 0x11, 0x52, 0x26, 0xe7, 0xf6, 0x4a, 0x85, 0x03, 0x5e,
		  0x26, 0x13, 0x83, 0x90, 0xec, 0x94, 0x9a, 0x12, 0xf2, 0x9c, 0xdd, 0x34,
		  0xbd, 0xbd, 0xb6, 0xf0, 0xd4, 0xa8, 0x43, 0x3a, 0x1b, 0x09, 0x18, 0x7d,
		  0x3b, 0x15, 0x48, 0x25, 0x3c, 0x0f, 0xf6, 0x06, 0x0a, 0xc4, 0x8c, 0xb1,
		  0xbc, 0x2a, 0x35, 0xe9, 0x74, 0x2d, 0x89, 0x72, 0x1e, 0x75, 0xf4, 0x79,
		  0xf9, 0x99, 0xf4, 0xa1, 0x3e, 0x38, 0xd8, 0xa1, 0x2c, 0x98, 0x05, 0x84,
		  0x95, 0x9e, 0x7a, 0xcb, 0x36, 0x1d, 0x3d, 0xfb, 0xf2, 0xd2, 0x6f, 0x18,
		  0x5d
	};
	sha256_update(&instance, test_data, 229);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xd2, 0x4e, 0x29, 0x42, 0xf8, 0x18, 0xab, 0x7d, 0xbe, 0x49, 0x07, 0x2a,
		  0x20, 0x04, 0x0b, 0xbd, 0x05, 0xad, 0xf9, 0x5b, 0xe4, 0x54, 0x55, 0x2d,
		  0x0b, 0x47, 0x4f, 0xaa, 0x92, 0x07, 0x6e, 0xf3
	));
}
TEST(SHA256, Test40) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[241] = {
		  0x5d, 0xec, 0xa3, 0xc4, 0x16, 0xd9, 0x65, 0x92, 0xac, 0x0d, 0xa8, 0x6e,
		  0x2a, 0xc0, 0x27, 0xba, 0x63, 0x58, 0xde, 0x8a, 0x32, 0x0f, 0x21, 0x4e,
		  0x66, 0x3a, 0xeb, 0xf4, 0x8a, 0x41, 0x37, 0xb2, 0xa7, 0x11, 0x1e, 0x24,
		  0xff, 0x34, 0x1b, 0x07, 0x32, 0x25, 0x51, 0x4e, 0x68, 0xce, 0xb7, 0xdf,
		  0xec, 0x0c, 0x9b, 0x8a, 0x14, 0x77, 0xdb, 0xd7, 0x65, 0x5e, 0x61, 0x51,
		  0x8c, 0x9d, 0xe6, 0xe6, 0x67, 0xda, 0x1a, 0x0f, 0x14, 0xb1, 0x30, 0x10,
		  0x13, 0x3c, 0x8a, 0xf4, 0x13, 0x18, 0xdd, 0xac, 0x88, 0x80, 0xfd, 0x43,
		  0xfa, 0x66, 0xf9, 0xca, 0x04, 0xae, 0x6e, 0x31, 0x52, 0x02, 0x84, 0xe2,
		  0x17, 0x87, 0x05, 0x05, 0x86, 0x8e, 0x25, 0x1c, 0x6b, 0x0e, 0xd5, 0x6e,
		  0xb2, 0x45, 0xab, 0x95, 0x08, 0x07, 0xd7, 0x88, 0x74, 0x59, 0x8f, 0xbf,
		  0x4e, 0xa9, 0x7f, 0x52, 0x57, 0x82, 0xb9, 0x4f, 0xbc, 0xf0, 0x56, 0xaf,
		  0x53, 0x00, 0x24, 0x7f, 0x44, 0x95, 0x26, 0x5d, 0x29, 0xb1, 0xde, 0xed,
		  0xa0, 0x11, 0xee, 0xe0, 0x9b, 0xdf, 0x39, 0xaa, 0xbe, 0xe3, 0x11, 0xf0,
		  0x1c, 0x2b, 0x87, 0xda, 0x91, 0xbd, 0x47, 0xb6, 0x19, 0xc2, 0xe4, 0x81,
		  0xf2, 0x5a, 0xfb, 0x93, 0xea, 0x53, 0x43, 0x36, 0x4f, 0x17, 0xa4, 0x63,
		  0x39, 0x2c, 0xea, 0xe7, 0xa4, 0xe8, 0xc3, 0x8a, 0xeb, 0xa6, 0x7c, 0x69,
		  0x5d, 0x2a, 0x7f, 0x27, 0xb1, 0x40, 0x8c, 0x06, 0x1b, 0x43, 0x83, 0x87,
		  0x11, 0xf6, 0x85, 0x91, 0x0c, 0x77, 0x27, 0xac, 0x08, 0x74, 0x84, 0x97,
		  0xe2, 0x4f, 0x29, 0xae, 0x86, 0x07, 0xb2, 0xd2, 0x25, 0x14, 0x58, 0xa3,
		  0xb6, 0xc6, 0x42, 0xbc, 0x58, 0x83, 0xee, 0x50, 0xa7, 0x57, 0x57, 0xbd,
		  0x70
	};
	sha256_update(&instance, test_data, 241);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xf9, 0x29, 0xfd, 0x7f, 0xee, 0xba, 0xd7, 0x88, 0x11, 0x36, 0x98, 0xa0,
		  0x0a, 0x81, 0xa7, 0x11, 0xbf, 0xf1, 0xe9, 0xe4, 0x6c, 0x44, 0x65, 0x44,
		  0x1f, 0x94, 0x16, 0x58, 0xc8, 0xa6, 0xd0, 0x4e
	));
}
TEST(SHA256, Test41) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[149] = {
		  0x49, 0xe8, 0x01, 0xe5, 0xb0, 0xcd, 0x50, 0x42, 0x9e, 0xad, 0xec, 0xe2,
		  0xfc, 0xb1, 0xbd, 0xd1, 0x18, 0x09, 0xe4, 0xf5, 0xbe, 0xe1, 0x1e, 0x08,
		  0x1d, 0x72, 0x42, 0xdf, 0x02, 0xe4, 0x88, 0xe4, 0x42, 0x79, 0x05, 0x00,
		  0xc3, 0x08, 0x26, 0x6a, 0xde, 0x50, 0x31, 0x7b, 0xcd, 0xf6, 0xea, 0x3c,
		  0x98, 0x99, 0xb2, 0x14, 0xc4, 0x74, 0x41, 0xda, 0xc7, 0x4d, 0xc9, 0x97,
		  0x51, 0x87, 0xbd, 0xb5, 0x96, 0x07, 0x8a, 0x09, 0xbf, 0x84, 0x4a, 0xb3,
		  0xb5, 0xc6, 0x7d, 0xac, 0x33, 0xce, 0x03, 0xd0, 0xd7, 0x6c, 0xa4, 0x3d,
		  0x5c, 0xc6, 0x14, 0xca, 0x39, 0x91, 0x5b, 0x8a, 0xbb, 0xf3, 0x41, 0x31,
		  0xde, 0xbf, 0x01, 0x0a, 0x71, 0x1d, 0x6a, 0x3a, 0x25, 0x62, 0x60, 0xaa,
		  0x2d, 0x13, 0xdf, 0xfe, 0x4e, 0x4b, 0xf9, 0xa4, 0x09, 0x8c, 0x91, 0x78,
		  0x2d, 0x42, 0x67, 0x1c, 0x55, 0x01, 0x89, 0x9c, 0x51, 0xb6, 0x5a, 0x88,
		  0x98, 0xab, 0xb3, 0x81, 0x14, 0xf8, 0x0b, 0xe9, 0xd7, 0x16, 0x01, 0xba,
		  0x27, 0x21, 0xa0, 0x82, 0xf5
	};
	sha256_update(&instance, test_data, 149);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xc3, 0x5e, 0xd1, 0xe7, 0x08, 0x92, 0x53, 0x94, 0xca, 0xf2, 0x9d, 0x8e,
		  0xf1, 0xfe, 0x4b, 0x50, 0x81, 0x88, 0xa5, 0xd5, 0xef, 0x77, 0xb9, 0x62,
		  0x27, 0x53, 0x6f, 0x59, 0x75, 0x3b, 0x39, 0x44
	));
}
TEST(SHA256, Test42) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[160] = {
		  0xe5, 0x81, 0x06, 0x37, 0x07, 0x0d, 0xb2, 0x57, 0xc2, 0x0f, 0x95, 0x04,
		  0x46, 0x6c, 0x76, 0xda, 0x75, 0x11, 0xb8, 0x74, 0x8d, 0x45, 0xbc, 0xc5,
		  0xc5, 0x71, 0x20, 0x94, 0xf1, 0x53, 0x67, 0xe2, 0xe2, 0xa9, 0xcd, 0xdb,
		  0x76, 0xe0, 0x2b, 0x90, 0xad, 0x92, 0xcc, 0x52, 0x5f, 0xf7, 0x36, 0xac,
		  0xf1, 0x50, 0xa3, 0x49, 0x4f, 0xb0, 0xe8, 0x51, 0xf6, 0x2b, 0xac, 0x62,
		  0xf5, 0xde, 0x91, 0x47, 0xcd, 0x7d, 0x0e, 0x7f, 0xb5, 0xa6, 0xf0, 0xec,
		  0x50, 0x51, 0xf0, 0xc6, 0x66, 0xd3, 0xe7, 0xa2, 0x85, 0x54, 0x29, 0xf1,
		  0x71, 0x3f, 0xed, 0xd8, 0xac, 0xde, 0x45, 0x6f, 0xa4, 0xce, 0x90, 0x15,
		  0xd6, 0x3f, 0x63, 0x16, 0x07, 0x52, 0xfa, 0x84, 0x16, 0x39, 0x22, 0x31,
		  0xf5, 0x7c, 0x14, 0x3c, 0xca, 0x2e, 0x2c, 0xb3, 0x9b, 0x3a, 0xce, 0xb1,
		  0xd2, 0x6c, 0x76, 0xb3, 0xa8, 0x53, 0x49, 0xee, 0x05, 0x55, 0x7c, 0xaa,
		  0x32, 0x26, 0xe3, 0xc3, 0x2c, 0x16, 0x65, 0xd6, 0x54, 0xe3, 0xd3, 0x95,
		  0x06, 0x89, 0x3c, 0xe3, 0x43, 0xff, 0xb9, 0x48, 0xc9, 0x5b, 0xcb, 0xae,
		  0xdf, 0x42, 0xa0, 0x07
	};
	sha256_update(&instance, test_data, 160);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x03, 0x1f, 0x20, 0xb1, 0x6b, 0x1c, 0x6f, 0x6c, 0x15, 0xde, 0x9b, 0x9d,
		  0x2c, 0x8f, 0x82, 0x76, 0xb0, 0x47, 0x20, 0x15, 0x4d, 0xca, 0x2c, 0x95,
		  0xb1, 0xb0, 0x36, 0x9e, 0x05, 0x66, 0x81, 0xc6
	));
}
TEST(SHA256, Test43) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[144] = {
		  0x08, 0xa5, 0x3c, 0x45, 0x8d, 0xfc, 0xcc, 0x8a, 0x6f, 0x88, 0x92, 0x3b,
		  0xc4, 0x8b, 0x6e, 0x03, 0x93, 0x44, 0x73, 0xf7, 0x36, 0xd9, 0xf2, 0x17,
		  0xdc, 0x37, 0xaa, 0xf4, 0xce, 0x20, 0xaa, 0x93, 0x74, 0x12, 0xb8, 0x9c,
		  0x07, 0x79, 0x65, 0x48, 0x4d, 0x98, 0xd9, 0x08, 0x2a, 0xfd, 0x20, 0x3a,
		  0x62, 0x93, 0x1f, 0x59, 0x56, 0x4f, 0xed, 0xa6, 0x15, 0x06, 0x6f, 0x8a,
		  0xa0, 0xc3, 0xce, 0xb7, 0x8e, 0xba, 0xf5, 0x33, 0xc8, 0xe2, 0xd8, 0x39,
		  0x1a, 0x0a, 0x1f, 0xe6, 0x4e, 0x55, 0x55, 0xc3, 0x21, 0x8c, 0x4c, 0x54,
		  0x02, 0x4f, 0xbd, 0x2e, 0x83, 0x3e, 0xde, 0x9c, 0xaa, 0x9c, 0x8f, 0x0b,
		  0x8f, 0xf5, 0x6d, 0xd4, 0x74, 0xff, 0x92, 0x93, 0x99, 0x8f, 0xd0, 0x9c,
		  0xef, 0x75, 0x9d, 0x84, 0xec, 0x7d, 0xc3, 0x3c, 0x83, 0x92, 0x27, 0x38,
		  0x57, 0xdc, 0xa4, 0x6d, 0x4a, 0x1e, 0x21, 0xa0, 0xf9, 0x5f, 0x69, 0x81,
		  0xc1, 0xbe, 0x49, 0x23, 0x47, 0xf1, 0x04, 0xdc, 0xdb, 0x6f, 0x28, 0xe0
	};
	sha256_update(&instance, test_data, 144);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xd1, 0x91, 0x02, 0x59, 0x91, 0x69, 0x76, 0xb4, 0x59, 0x01, 0x44, 0x9d,
		  0xb3, 0xed, 0x7e, 0x08, 0x7c, 0x55, 0x5f, 0x19, 0x48, 0xcc, 0x54, 0x35,
		  0x9f, 0x17, 0x9f, 0xc8, 0xa5, 0xa5, 0xcc, 0x87
	));
}
TEST(SHA256, Test44) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[161] = {
		  0x0d, 0x1a, 0x41, 0xb5, 0x8c, 0xe0, 0x68, 0x31, 0x61, 0xda, 0x02, 0x6f,
		  0x11, 0x9a, 0x28, 0xd4, 0x1d, 0x6e, 0xf4, 0xde, 0x16, 0x5e, 0x72, 0xea,
		  0xc1, 0xd3, 0x0c, 0x87, 0xb9, 0x91, 0xc7, 0xca, 0x96, 0x37, 0xd8, 0x9c,
		  0xc7, 0x5c, 0x48, 0x1a, 0x75, 0x14, 0x66, 0x1b, 0xfd, 0x87, 0x6c, 0x15,
		  0x44, 0x76, 0xe5, 0xb7, 0x3a, 0x20, 0x70, 0xf9, 0x9f, 0x49, 0x8d, 0x1f,
		  0x14, 0x68, 0x7b, 0x7e, 0x73, 0xd2, 0x7c, 0xe7, 0x69, 0x99, 0x95, 0x0b,
		  0x8e, 0x5a, 0x81, 0xd5, 0xb9, 0x7f, 0x68, 0xa9, 0x3a, 0x6e, 0x74, 0x70,
		  0x29, 0xec, 0x48, 0xe8, 0x51, 0x34, 0x83, 0xfa, 0x20, 0x2e, 0x6a, 0xe2,
		  0xa8, 0x6e, 0xa5, 0xa1, 0xe5, 0x13, 0x2d, 0x70, 0x4d, 0x36, 0xb9, 0x21,
		  0xf1, 0x43, 0x33, 0x88, 0x3e, 0x98, 0x64, 0x92, 0x9d, 0xd6, 0xf0, 0x41,
		  0xb5, 0xfb, 0x4c, 0xdb, 0xbf, 0x5b, 0xdd, 0x0a, 0x81, 0x41, 0x68, 0x2c,
		  0xdb, 0x88, 0xa0, 0xae, 0xc3, 0x7e, 0x0f, 0xca, 0x58, 0x56, 0x7e, 0x0c,
		  0x0f, 0x09, 0xa2, 0x7c, 0x2b, 0x07, 0xd6, 0xb2, 0xa3, 0xee, 0xf0, 0x4d,
		  0x7d, 0xc7, 0x6f, 0xcb, 0x2f
	};
	sha256_update(&instance, test_data, 161);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0xa5, 0xf0, 0x79, 0x8b, 0xd2, 0x5e, 0x66, 0x28, 0xc0, 0x67, 0xba, 0x88,
		  0x72, 0x12, 0xed, 0xe0, 0x15, 0xd0, 0x8b, 0x2e, 0xe9, 0xff, 0xb5, 0x01,
		  0xe0, 0x2b, 0x9f, 0x3a, 0x12, 0x19, 0xc0, 0xe7
	));
}
TEST(SHA256, Test45) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[81] = {
		  0x33, 0x4e, 0x5a, 0x53, 0xb6, 0x01, 0x27, 0x98, 0xef, 0x51, 0x33, 0x6d,
		  0xa2, 0x23, 0x08, 0xaa, 0x02, 0x8f, 0xe7, 0x5e, 0x10, 0x2c, 0x79, 0xab,
		  0x69, 0x27, 0xe9, 0xf4, 0xfb, 0x26, 0x4d, 0x44, 0x74, 0xd7, 0xfe, 0xd3,
		  0x99, 0x53, 0x7d, 0x63, 0x5c, 0xbb, 0xb5, 0x6d, 0xc2, 0x0e, 0x11, 0xa9,
		  0x61, 0xf1, 0x56, 0x2d, 0xe4, 0xbe, 0xe6, 0x58, 0x4c, 0x8e, 0x22, 0x5c,
		  0x73, 0x48, 0xfd, 0x83, 0xdc, 0x32, 0x43, 0xe7, 0x43, 0x89, 0xd6, 0xba,
		  0x39, 0x54, 0x80, 0xb4, 0x4c, 0x18, 0xef, 0x09, 0x2a
	};
	sha256_update(&instance, test_data, 81);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x1d, 0x4e, 0xc7, 0xc4, 0x66, 0x3d, 0xd5, 0x0d, 0xe8, 0xdb, 0x9c, 0x43,
		  0x4d, 0xd5, 0x2e, 0x73, 0x60, 0x04, 0x8a, 0xf6, 0x27, 0x59, 0x1d, 0xfb,
		  0x3c, 0x99, 0x5f, 0xa9, 0xfb, 0xb6, 0xa2, 0xe1
	));
}
TEST(SHA256, Test46) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[192] = {
		  0x9e, 0x40, 0x01, 0x47, 0x4c, 0x0f, 0xce, 0xd0, 0xaf, 0xb4, 0x63, 0x27,
		  0xe2, 0x2e, 0x52, 0x64, 0x8f, 0xa4, 0x0c, 0x3b, 0x64, 0x22, 0x6a, 0xe5,
		  0xda, 0xbc, 0x71, 0x92, 0x0c, 0x6f, 0x33, 0xa6, 0x31, 0xcf, 0x1f, 0x68,
		  0x68, 0x44, 0x81, 0xad, 0xad, 0x5d, 0x0f, 0x8b, 0x46, 0xad, 0xcc, 0x42,
		  0xb0, 0x27, 0x56, 0x3a, 0x09, 0x16, 0x83, 0x79, 0x8a, 0xba, 0x99, 0x9d,
		  0x58, 0xb4, 0xf2, 0x2c, 0x8b, 0xde, 0x5e, 0xff, 0xb8, 0xb0, 0x54, 0xb9,
		  0xc5, 0x5e, 0xac, 0x5b, 0xc1, 0x04, 0xaa, 0xbe, 0x99, 0x09, 0x0b, 0xc0,
		  0xde, 0x74, 0xe2, 0x26, 0xde, 0x54, 0xe6, 0xea, 0xd9, 0xce, 0xf0, 0x43,
		  0x3d, 0x20, 0x3d, 0xab, 0xab, 0x6c, 0x13, 0x61, 0x68, 0xe1, 0x6b, 0x45,
		  0x50, 0xfc, 0x49, 0xb8, 0xfc, 0x7d, 0x29, 0x83, 0x9b, 0x10, 0xed, 0x07,
		  0x2a, 0x63, 0x94, 0x4c, 0x89, 0xea, 0x89, 0xa2, 0xde, 0xf0, 0x7c, 0x73,
		  0x6f, 0xee, 0x51, 0x4b, 0x95, 0xe8, 0xc5, 0xb6, 0x45, 0x0e, 0xec, 0x5f,
		  0x01, 0x75, 0x6f, 0xbe, 0xc5, 0xf5, 0xfb, 0x6e, 0xf9, 0xbc, 0xba, 0x94,
		  0x92, 0xc1, 0x6e, 0xdb, 0x3e, 0xda, 0xc9, 0x54, 0x9a, 0x3c, 0xa9, 0xd6,
		  0xe8, 0xb9, 0x79, 0x3e, 0xf8, 0x1b, 0xcb, 0x3b, 0x68, 0x80, 0xe2, 0xa2,
		  0x30, 0x86, 0x09, 0x64, 0x24, 0x44, 0xdd, 0x8e, 0x63, 0x2e, 0xd8, 0xba
	};
	sha256_update(&instance, test_data, 192);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x58, 0xb7, 0x3b, 0x16, 0xef, 0xea, 0x4c, 0x7a, 0x7e, 0xb0, 0xae, 0xab,
		  0x92, 0xac, 0x13, 0xc2, 0xf5, 0xca, 0x1e, 0xe5, 0xdb, 0x2e, 0xb5, 0x6e,
		  0xe6, 0x3f, 0xe2, 0xf3, 0x79, 0x1f, 0x18, 0x17
	));
}
TEST(SHA256, Test47) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[207] = {
		  0x95, 0x7e, 0x11, 0xa5, 0x55, 0xcf, 0x73, 0x09, 0x7a, 0x37, 0xfd, 0xa1,
		  0x09, 0x87, 0xfc, 0x9b, 0x2d, 0x13, 0x47, 0xa7, 0x22, 0x6d, 0x91, 0x0a,
		  0x11, 0xaf, 0xb1, 0x3a, 0x8a, 0xc7, 0x42, 0x9c, 0x95, 0xcc, 0x27, 0xab,
		  0x86, 0x62, 0xf1, 0xd5, 0xa5, 0x61, 0x17, 0x08, 0xbd, 0x3c, 0x14, 0xe1,
		  0x8a, 0x15, 0x35, 0x94, 0x71, 0xd3, 0x40, 0x13, 0x46, 0x75, 0x7f, 0xcb,
		  0x3d, 0x71, 0xf0, 0x34, 0x5c, 0xc8, 0x9a, 0x26, 0x8d, 0x9d, 0xd3, 0x17,
		  0x1e, 0xc6, 0xdf, 0x80, 0x07, 0x2e, 0x0e, 0x7c, 0x9b, 0xc2, 0xf5, 0x95,
		  0x17, 0x87, 0x56, 0xd3, 0x8f, 0xdc, 0x4b, 0x48, 0x61, 0x0e, 0xac, 0xfe,
		  0xd3, 0x8d, 0x2b, 0x79, 0x1b, 0xd3, 0x41, 0x7e, 0x58, 0xcd, 0x82, 0x30,
		  0x21, 0x7b, 0xef, 0x84, 0x17, 0x4d, 0x19, 0x07, 0xd8, 0xfc, 0xbf, 0xb8,
		  0x54, 0x0e, 0x97, 0x64, 0x12, 0xcb, 0x5b, 0x1f, 0xb9, 0x86, 0xa3, 0xed,
		  0xab, 0x95, 0xbc, 0x6e, 0x6a, 0xd8, 0xcb, 0x86, 0xaf, 0x89, 0x3e, 0x9a,
		  0x43, 0x8c, 0x99, 0xbc, 0xdb, 0x4c, 0x95, 0xa1, 0xbd, 0xcd, 0xda, 0x89,
		  0xf4, 0xc0, 0x40, 0x60, 0x8e, 0x3f, 0x57, 0x0c, 0x6d, 0xc9, 0x42, 0x33,
		  0xd2, 0xb3, 0x9a, 0x52, 0xa5, 0x92, 0x77, 0x48, 0x6f, 0x70, 0x79, 0x1c,
		  0x0d, 0x50, 0x30, 0xf6, 0x95, 0xea, 0xb4, 0x03, 0x74, 0x9b, 0xfa, 0xb0,
		  0xa2, 0x80, 0x4d, 0xf5, 0xa4, 0xac, 0x1a, 0x20, 0x2e, 0xc8, 0x87, 0x6c,
		  0x1d, 0xb0, 0x91
	};
	sha256_update(&instance, test_data, 207);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x6d, 0x10, 0xdb, 0x3b, 0x4f, 0x46, 0x34, 0x53, 0x8c, 0x46, 0xed, 0x0e,
		  0xb0, 0xfa, 0xa6, 0x17, 0x61, 0x2d, 0xdf, 0xfa, 0x30, 0x74, 0x37, 0x1e,
		  0xba, 0xcb, 0x06, 0x43, 0x43, 0x77, 0x19, 0x79
	));
}
TEST(SHA256, Test48) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[131] = {
		  0xb6, 0x90, 0x0a, 0x6c, 0x1a, 0xc1, 0xc5, 0x6e, 0x7d, 0x0c, 0x02, 0x15,
		  0xc8, 0xde, 0xec, 0xc2, 0xff, 0xf2, 0x37, 0xdf, 0x8b, 0x4a, 0xd2, 0x2c,
		  0x59, 0x0a, 0x97, 0x02, 0x7d, 0xc8, 0x58, 0xd3, 0x4e, 0x59, 0x8d, 0xa8,
		  0x16, 0x22, 0xb3, 0x20, 0x04, 0x63, 0x33, 0x5a, 0x98, 0xa5, 0x77, 0xcc,
		  0xe8, 0xc6, 0x1f, 0x51, 0x04, 0xc2, 0x72, 0xb6, 0xe4, 0x6a, 0x5b, 0xdd,
		  0x41, 0xf6, 0x9c, 0xa5, 0x4a, 0xdb, 0x8c, 0x97, 0x70, 0x6d, 0xe1, 0x0c,
		  0xa5, 0x31, 0x0a, 0x2f, 0xff, 0x7d, 0x5e, 0xf9, 0x6b, 0x32, 0x94, 0x7b,
		  0x85, 0xfe, 0x50, 0x7d, 0x18, 0x96, 0x28, 0xc5, 0x3c, 0xe6, 0x9b, 0xf8,
		  0xcf, 0x57, 0xb8, 0xd8, 0x3e, 0x6a, 0x44, 0xdd, 0x6c, 0xb6, 0x9b, 0x64,
		  0x43, 0x3f, 0x05, 0xf8, 0x86, 0x69, 0xaf, 0x86, 0x4b, 0x86, 0x59, 0x1d,
		  0x43, 0xda, 0xd3, 0xa5, 0xd8, 0xd1, 0x84, 0x42, 0x8d, 0x01, 0x70
	};
	sha256_update(&instance, test_data, 131);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x03, 0xa9, 0x32, 0xf2, 0x85, 0xa5, 0xc7, 0xd3, 0x7b, 0x34, 0x0d, 0xb2,
		  0x8c, 0xc5, 0x2f, 0x3f, 0x66, 0x95, 0xc5, 0xfe, 0xc8, 0xe8, 0x95, 0xa5,
		  0x97, 0x77, 0x43, 0xbf, 0x0c, 0x6c, 0x1e, 0x09
	));
}
TEST(SHA256, Test49) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[287] = {
		  0x3b, 0xc6, 0x72, 0xaa, 0xa0, 0x85, 0x84, 0xbf, 0xb9, 0x8d, 0x37, 0xf8,
		  0x68, 0xbe, 0x6c, 0xd7, 0xf8, 0x3f, 0x18, 0xea, 0xfd, 0xbe, 0xe8, 0xd3,
		  0xc5, 0xe2, 0xfc, 0xf1, 0x47, 0x20, 0x5c, 0x23, 0xcc, 0x8c, 0xbd, 0x64,
		  0xb7, 0x6d, 0x41, 0xe2, 0xb4, 0xaa, 0xe2, 0xe6, 0x07, 0x57, 0x7f, 0x31,
		  0x92, 0xa7, 0xdf, 0x97, 0xbb, 0x50, 0x17, 0xd8, 0xa7, 0xa7, 0xe6, 0xc1,
		  0xff, 0xee, 0x4f, 0x0c, 0x2c, 0x6d, 0xbd, 0x89, 0x29, 0x5a, 0xb9, 0x9d,
		  0x29, 0xfe, 0xb4, 0xef, 0x07, 0xa8, 0x3b, 0xfa, 0xc0, 0x18, 0xcd, 0x43,
		  0x1f, 0xb1, 0xb1, 0x8f, 0xdc, 0x41, 0x59, 0x76, 0xb1, 0xe8, 0x9c, 0x7d,
		  0xe9, 0xe2, 0x1f, 0x34, 0xe0, 0x00, 0x02, 0xd0, 0x3c, 0x31, 0x99, 0xd7,
		  0x03, 0x72, 0xc7, 0x6c, 0x23, 0x8b, 0xf0, 0xd6, 0x1a, 0x72, 0x89, 0x31,
		  0xe8, 0x7a, 0x35, 0x7b, 0x78, 0x66, 0x44, 0xa0, 0x03, 0x8d, 0xf6, 0x27,
		  0x1f, 0xba, 0x23, 0x2f, 0x99, 0x4b, 0x3e, 0x46, 0x1e, 0x4a, 0x57, 0xe0,
		  0x0e, 0x36, 0x9a, 0x05, 0x9c, 0xea, 0x41, 0xfc, 0xa0, 0x3a, 0x94, 0x39,
		  0x53, 0x19, 0x05, 0xa6, 0x3c, 0x02, 0x4d, 0x65, 0x7d, 0xa2, 0x83, 0xd8,
		  0x8c, 0x4b, 0x04, 0x7d, 0x1a, 0xab, 0xdb, 0x13, 0x4a, 0x87, 0x85, 0x5a,
		  0x35, 0xbe, 0x3a, 0xe8, 0xfd, 0xc8, 0xfa, 0xba, 0x1c, 0x4d, 0x10, 0xff,
		  0x2b, 0xf3, 0x5f, 0x3b, 0x54, 0x9c, 0xa6, 0x76, 0x0d, 0xc3, 0x32, 0x67,
		  0xac, 0x58, 0x3c, 0x14, 0xc2, 0x88, 0x47, 0xe0, 0x8c, 0xb2, 0xfb, 0xd4,
		  0x58, 0xc8, 0xa5, 0xa9, 0xb1, 0x80, 0x80, 0x86, 0xc6, 0xda, 0x57, 0xb4,
		  0x34, 0x05, 0x37, 0xd6, 0xe5, 0x39, 0x07, 0x15, 0x54, 0xef, 0xc4, 0xa1,
		  0x7b, 0x98, 0xc9, 0x4d, 0x7c, 0xaf, 0x14, 0x1f, 0x5e, 0xe0, 0x56, 0xc7,
		  0x32, 0xec, 0x4c, 0xd3, 0x2e, 0x73, 0x1f, 0x87, 0x9b, 0x90, 0x31, 0x70,
		  0x66, 0x22, 0x14, 0xbb, 0x53, 0x6f, 0x5f, 0x89, 0x42, 0x11, 0x0c, 0xe0,
		  0x7a, 0xbf, 0x2f, 0xff, 0x6f, 0x79, 0x5f, 0xfd, 0x97, 0x30, 0xaf
	};
	sha256_update(&instance, test_data, 287);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x8a, 0x23, 0xfe, 0x73, 0x50, 0x74, 0xdc, 0xbc, 0xe9, 0xa9, 0x62, 0xd9,
		  0xa3, 0x2c, 0xd4, 0x04, 0xfd, 0xe8, 0x77, 0x3f, 0xa2, 0x48, 0x92, 0xd8,
		  0x22, 0x55, 0x64, 0x2b, 0xf8, 0xa2, 0xa5, 0x30
	));
}
TEST(SHA256, Test50) {
	struct sha256 instance;
	uint8_t result[SHA256_DIGEST_SIZE];
	sha256_begin(&instance);
	const uint8_t test_data[195] = {
		  0x0b, 0xbb, 0xe4, 0xda, 0xf1, 0x98, 0xc3, 0x08, 0x8b, 0xe8, 0x20, 0x26,
		  0x18, 0xdb, 0x1d, 0x30, 0x8c, 0xe6, 0xb2, 0xa3, 0x48, 0x74, 0x68, 0x42,
		  0xa6, 0x73, 0x8d, 0x2b, 0x22, 0x8a, 0xda, 0x25, 0x31, 0x06, 0xbd, 0x55,
		  0x6e, 0x26, 0x40, 0x1a, 0x44, 0x6e, 0xdf, 0x35, 0x21, 0x52, 0x40, 0xe6,
		  0x6f, 0x8f, 0x3b, 0xc9, 0x02, 0x33, 0xa6, 0x60, 0x97, 0x10, 0xaa, 0xdb,
		  0xe3, 0x48, 0xce, 0x4b, 0xf5, 0xe5, 0xfa, 0x60, 0xd5, 0x2c, 0xbb, 0x35,
		  0xfb, 0x40, 0x49, 0x1f, 0x50, 0xbe, 0xe3, 0x79, 0x04, 0x50, 0x11, 0x8a,
		  0x13, 0xb0, 0x18, 0x4b, 0x6c, 0xea, 0x24, 0xf8, 0xc5, 0xcf, 0x3d, 0x12,
		  0xb2, 0xc9, 0x43, 0x6c, 0x0c, 0xd5, 0xc8, 0x85, 0x2b, 0xd0, 0x2e, 0x41,
		  0x31, 0xee, 0x69, 0x65, 0x48, 0xe9, 0xaa, 0xe1, 0x32, 0x1d, 0xdb, 0x2e,
		  0xc5, 0x89, 0xb9, 0x91, 0xf1, 0x68, 0x60, 0x95, 0x8a, 0x8f, 0x06, 0x57,
		  0xf0, 0xb6, 0x34, 0xad, 0x04, 0xbc, 0xce, 0x04, 0x0f, 0x96, 0x40, 0x36,
		  0xd9, 0x09, 0xb6, 0x67, 0x4b, 0x41, 0x79, 0xa7, 0x1c, 0x3a, 0x96, 0x7b,
		  0xe3, 0xd7, 0x94, 0x3f, 0x0f, 0xf5, 0xe2, 0x20, 0x2c, 0x8f, 0x1b, 0xd6,
		  0xe0, 0x4b, 0x8a, 0x5e, 0xae, 0x34, 0xc8, 0xcc, 0x71, 0x5b, 0x35, 0x1d,
		  0x25, 0x5f, 0xb4, 0x3d, 0x5d, 0xb4, 0x15, 0x49, 0xfb, 0x90, 0x8a, 0x96,
		  0xb5, 0xe8, 0x8d
	};
	sha256_update(&instance, test_data, 195);
	sha256_finish(&instance, &result);
	EXPECT_THAT(result, testing::ElementsAre(
		  0x35, 0x85, 0x5c, 0xeb, 0xe6, 0xbe, 0x6b, 0x38, 0xc7, 0x7c, 0x2c, 0x16,
		  0xae, 0x79, 0xef, 0x24, 0xc0, 0x1e, 0xd0, 0x22, 0x22, 0x12, 0x2a, 0x47,
		  0x14, 0x51, 0x50, 0x4e, 0x6b, 0x0a, 0xc9, 0xf0
	));
}
